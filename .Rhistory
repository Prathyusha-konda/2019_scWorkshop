pbmc <- RunICA(object = pbmc,
ic.genes = pbmc@var.genes,
ics.print = 1:5,
genes.print = 5)
pbmc_small <- RunICA(pbmc_small, ics.compute=5)
?RunPCA
PCAPlot(object = pbmc, dim.1 = 1, dim.2 = 2)
PCAPlot(object = pbmc, dim.1 = 1, dim.2 = 2)
pbmc@ident
pbmc@ident <- NULL
pbmc@ident <- ''
pbmc@ident <- factor()
pbmc@meta.data
pbmc@meta.data <- data.frame()
library(Seurat)
library(dplyr)
library(ggplot2)
pbmc <- pbmc_small
pbmc@ident <- factor()
pbmc@meta.data <- data.frame()
library(Seurat)
library(dplyr)
library(ggplot2)
pbmc <- pbmc_small
pbmc@ident <- factor()
pbmc@meta.data <- data.frame()
library(CountClust)
# The number of genes and UMIs (nGene and nUMI) are automatically calculated
# for every object by Seurat.  For non-UMI data, nUMI represents the sum of
# the non-normalized values within a cell We calculate the percentage of
# mitochondrial genes here and store it in percent.mito using AddMetaData.
# We use object@raw.data since this represents non-transformed and
# non-log-normalized counts The % of UMI mapping to MT-genes is a common
# scRNA-seq QC metric.
mito.genes <- grep(pattern = "^MT-", x = rownames(x = pbmc@data), value = TRUE)
percent.mito <- Matrix::colSums(pbmc@raw.data[mito.genes, ])/Matrix::colSums(pbmc@raw.data)
# AddMetaData adds columns to object@meta.data, and is a great place to
# stash QC stats
pbmc <- AddMetaData(object = pbmc, metadata = percent.mito, col.name = "percent.mito")
VlnPlot(object = pbmc, features.plot = c("nGene", "nUMI", "percent.mito"), nCol = 3)
pbmc <- pbmc_small
pbmc@meta.data
pbmc@meta.data[,1:2]
View(pbmc_small@meta.data)
pbmc <- pbmc_small
pbmc@ident <- factor()
SetIdent(pbmc_small, "res.1")
SetIdent(pbmc_small, res.1)
?SetIdent
SetIdent(pbmc_small, cells.use = res.1, ident.use = 'res.1')
SetIdent(pbmc_small, ident.use = 'res.1')
pbmc_small@ident
# Find discriminating markers
tcell.markers <- FindMarkers(object = pbmc, ident.1 = 0, ident.2 = 1)
## Set Cluster Identity to the clustering using a resolution of 1 (res.1)
SetIdent(pbmc_small, ident.use = 'res.1')
pbmc_counts <- as.matrix(pbmc_small@data)
pbmc_meta <- pbmc_small@meta.data
gene_names <- rownames(pbmc_counts)
pbmc_FitGoM <- FitGoM(t(pbmc_counts), K=4)
omega <- pbmc_FitGoM$fit$omega
annotation <- data.frame(sample_id = rownames(omega),
tissue_label = paste0("topic", 1:4))
colnames(omega) <- paste0("topic", 1:4)
rownames(omega) <- annotation$sample_id;
StructureGGplot(omega = omega,
annotation = annotation,
palette = RColorBrewer::brewer.pal(4, "Dark2"),
yaxis_label = "Cells",
order_sample = TRUE,
axis_tick = list(axis_ticks_length = .1,
axis_ticks_lwd_y = .1,
axis_ticks_lwd_x = .1,
axis_label_size = 7,
axis_label_face = "bold"))
## Add Topic Scores to Meta Data Part of the Seurat Object
pbmc_small@meta.data <- cbind(pbmc_meta, omega)
set.seed(2019)
pbmc <-RunTSNE(pbmc, reduction.use = "pca", dims.use = 1:5, perplexity=10)
# note that you can set do.label=T to help label individual clusters
TSNEPlot(object = pbmc)
rm(list=ls())
library(Seurat)
library(dplyr)
library(ggplot2)
pbmc <- pbmc_small
pbmc@ident <- factor()
library(CountClust)
# The number of genes and UMIs (nGene and nUMI) are automatically calculated
# for every object by Seurat.  For non-UMI data, nUMI represents the sum of
# the non-normalized values within a cell We calculate the percentage of
# mitochondrial genes here and store it in percent.mito using AddMetaData.
# We use object@raw.data since this represents non-transformed and
# non-log-normalized counts The % of UMI mapping to MT-genes is a common
# scRNA-seq QC metric.
mito.genes <- grep(pattern = "^MT-", x = rownames(x = pbmc@data), value = TRUE)
percent.mito <- Matrix::colSums(pbmc@raw.data[mito.genes, ])/Matrix::colSums(pbmc@raw.data)
# AddMetaData adds columns to object@meta.data, and is a great place to
# stash QC stats
pbmc <- AddMetaData(object = pbmc, metadata = percent.mito, col.name = "percent.mito")
VlnPlot(object = pbmc, features.plot = c("nGene", "nUMI", "percent.mito"), nCol = 3)
# The number of genes and UMIs (nGene and nUMI) are automatically calculated
# for every object by Seurat.  For non-UMI data, nUMI represents the sum of
# the non-normalized values within a cell We calculate the percentage of
# mitochondrial genes here and store it in percent.mito using AddMetaData.
# We use object@raw.data since this represents non-transformed and
# non-log-normalized counts The % of UMI mapping to MT-genes is a common
# scRNA-seq QC metric.
mito.genes <- grep(pattern = "^MT-", x = rownames(x = pbmc@data), value = TRUE)
percent.mito <- Matrix::colSums(pbmc@raw.data[mito.genes, ])/Matrix::colSums(pbmc@raw.data)
# AddMetaData adds columns to object@meta.data, and is a great place to
# stash QC stats
pbmc <- AddMetaData(object = pbmc, metadata = percent.mito, col.name = "percent.mito")
VlnPlot(object = pbmc, features.plot = c("nGene", "nUMI", "percent.mito"), nCol = 3)
library(Seurat)
library(dplyr)
library(ggplot2)
pbmc <- pbmc_small
pbmc@ident <- factor()
# The number of genes and UMIs (nGene and nUMI) are automatically calculated
# for every object by Seurat.  For non-UMI data, nUMI represents the sum of
# the non-normalized values within a cell We calculate the percentage of
# mitochondrial genes here and store it in percent.mito using AddMetaData.
# We use object@raw.data since this represents non-transformed and
# non-log-normalized counts The % of UMI mapping to MT-genes is a common
# scRNA-seq QC metric.
mito.genes <- grep(pattern = "^MT-", x = rownames(x = pbmc@data), value = TRUE)
percent.mito <- Matrix::colSums(pbmc@raw.data[mito.genes, ])/Matrix::colSums(pbmc@raw.data)
# AddMetaData adds columns to object@meta.data, and is a great place to
# stash QC stats
pbmc <- AddMetaData(object = pbmc, metadata = percent.mito, col.name = "percent.mito")
VlnPlot(object = pbmc, features.plot = c("nGene", "nUMI", "percent.mito"), nCol = 3)
library(Seurat)
library(dplyr)
library(ggplot2)
pbmc <- pbmc_small
pbmc@ident <- factor()
library(CountClust)
# The number of genes and UMIs (nGene and nUMI) are automatically calculated
# for every object by Seurat.  For non-UMI data, nUMI represents the sum of
# the non-normalized values within a cell We calculate the percentage of
# mitochondrial genes here and store it in percent.mito using AddMetaData.
# We use object@raw.data since this represents non-transformed and
# non-log-normalized counts The % of UMI mapping to MT-genes is a common
# scRNA-seq QC metric.
mito.genes <- grep(pattern = "^MT-", x = rownames(x = pbmc@data), value = TRUE)
percent.mito <- Matrix::colSums(pbmc@raw.data[mito.genes, ])/Matrix::colSums(pbmc@raw.data)
# AddMetaData adds columns to object@meta.data, and is a great place to
# stash QC stats
pbmc <- AddMetaData(object = pbmc, metadata = percent.mito, col.name = "percent.mito")
VlnPlot(object = pbmc, features.plot = c("nGene", "nUMI", "percent.mito"), nCol = 3)
VlnPlot(object = pbmc, features.plot = c("nGene", "nUMI"), nCol = 2)#, "percent.mito"), nCol = 3)
pbmc@meta.data
VlnPlot(object = pbmc, features.plot = c("nGene", "nUMI"), nCol = 2)#, "percent.mito"), nCol = 3)
# The number of genes and UMIs (nGene and nUMI) are automatically calculated
# for every object by Seurat.  For non-UMI data, nUMI represents the sum of
# the non-normalized values within a cell We calculate the percentage of
# mitochondrial genes here and store it in percent.mito using AddMetaData.
# We use object@raw.data since this represents non-transformed and
# non-log-normalized counts The % of UMI mapping to MT-genes is a common
# scRNA-seq QC metric.
mito.genes <- grep(pattern = "^MT-", x = rownames(x = pbmc@data), value = TRUE)
percent.mito <- Matrix::colSums(pbmc@raw.data[mito.genes, ])/Matrix::colSums(pbmc@raw.data)
# AddMetaData adds columns to object@meta.data, and is a great place to
# stash QC stats
pbmc <- AddMetaData(object = pbmc, metadata = percent.mito, col.name = "percent.mito")
##VlnPlot(object = pbmc, features.plot = c("nGene", "nUMI"), "percent.mito"), nCol = 3)
# GenePlot is typically used to visualize gene-gene relationships, but can
# be used for anything calculated by the object, i.e. columns in
# object@meta.data, PC scores etc.  Since there is a rare subset of cells
# with an outlier level of high mitochondrial percentage and also low UMI
# content, we filter these as well
par(mfrow = c(1, 2))
GenePlot(object = pbmc, gene1 = "nUMI", gene2 = "percent.mito")
GenePlot(object = pbmc, gene1 = "nUMI", gene2 = "nGene")
library(Seurat)
library(dplyr)
library(ggplot2)
pbmc <- pbmc_small
# pbmc@ident <- factor()
# The number of genes and UMIs (nGene and nUMI) are automatically calculated
# for every object by Seurat.  For non-UMI data, nUMI represents the sum of
# the non-normalized values within a cell We calculate the percentage of
# mitochondrial genes here and store it in percent.mito using AddMetaData.
# We use object@raw.data since this represents non-transformed and
# non-log-normalized counts The % of UMI mapping to MT-genes is a common
# scRNA-seq QC metric.
mito.genes <- grep(pattern = "^MT-", x = rownames(x = pbmc@data), value = TRUE)
percent.mito <- Matrix::colSums(pbmc@raw.data[mito.genes, ])/Matrix::colSums(pbmc@raw.data)
# AddMetaData adds columns to object@meta.data, and is a great place to
# stash QC stats
pbmc <- AddMetaData(object = pbmc, metadata = percent.mito, col.name = "percent.mito")
##VlnPlot(object = pbmc, features.plot = c("nGene", "nUMI"), "percent.mito"), nCol = 3)
# GenePlot is typically used to visualize gene-gene relationships, but can
# be used for anything calculated by the object, i.e. columns in
# object@meta.data, PC scores etc.  Since there is a rare subset of cells
# with an outlier level of high mitochondrial percentage and also low UMI
# content, we filter these as well
par(mfrow = c(1, 2))
GenePlot(object = pbmc, gene1 = "nUMI", gene2 = "percent.mito")
GenePlot(object = pbmc, gene1 = "nUMI", gene2 = "nGene")
?SetIdent
SetIdent(pbmc, ident.use = NULL)
SetIdent(pbmc, ident.use = '')
# The number of genes and UMIs (nGene and nUMI) are automatically calculated
# for every object by Seurat.  For non-UMI data, nUMI represents the sum of
# the non-normalized values within a cell We calculate the percentage of
# mitochondrial genes here and store it in percent.mito using AddMetaData.
# We use object@raw.data since this represents non-transformed and
# non-log-normalized counts The % of UMI mapping to MT-genes is a common
# scRNA-seq QC metric.
mito.genes <- grep(pattern = "^MT-", x = rownames(x = pbmc@data), value = TRUE)
percent.mito <- Matrix::colSums(pbmc@raw.data[mito.genes, ])/Matrix::colSums(pbmc@raw.data)
# AddMetaData adds columns to object@meta.data, and is a great place to
# stash QC stats
pbmc <- AddMetaData(object = pbmc, metadata = percent.mito, col.name = "percent.mito")
##VlnPlot(object = pbmc, features.plot = c("nGene", "nUMI"), "percent.mito"), nCol = 3)
# GenePlot is typically used to visualize gene-gene relationships, but can
# be used for anything calculated by the object, i.e. columns in
# object@meta.data, PC scores etc.  Since there is a rare subset of cells
# with an outlier level of high mitochondrial percentage and also low UMI
# content, we filter these as well
par(mfrow = c(1, 2))
GenePlot(object = pbmc, gene1 = "nUMI", gene2 = "percent.mito")
GenePlot(object = pbmc, gene1 = "nUMI", gene2 = "nGene")
pbmc <- NormalizeData(object = pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
pbmc <- FindVariableGenes(object = pbmc,
mean.function = ExpMean,
dispersion.function = LogVMR,
x.low.cutoff = 0.0125,
x.high.cutoff = 3,
y.cutoff = 0.5)
?FindVariableGenes
pbmc <- FindVariableGenes(object = pbmc,
mean.function = ExpMean,
dispersion.function = LogVMR,
do.plot = FALSE
x.low.cutoff = 0.0125,
pbmc <- FindVariableGenes(object = pbmc,
mean.function = ExpMean,
dispersion.function = LogVMR,
do.plot = FALSE)
pbmc <- ScaleData(object = pbmc, vars.to.regress = c("nUMI", "percent.mito"))
pbmc <- RunPCA(object = pbmc,
pc.genes = pbmc@var.genes,
do.print = TRUE,
pcs.print = 1:5,
genes.print = 5)
bookdown::render_book('.')
bookdown::render_book('.')
bookdown::render_book('.')
>VizICA()
theta_mat <- pbmc_FitGoM$theta;
top_features <- ExtractTopFeatures(theta_mat, top_features=100,
method="poisson", options="min");
gene_list <- do.call(rbind, lapply(1:dim(top_features$indices)[1],
function(x) deng.gene_names[top_features$indices[x,]]))
top_features <- ExtractTopFeatures(theta_mat, top_features=100,
method="poisson", options="min")
pbmc_FitGoM$theta
## Set Cluster Identity to the clustering using a resolution of 1 (res.1)
SetIdent(pbmc_small, ident.use = 'res.1')
pbmc_counts <- as.matrix(pbmc_small@data)
pbmc_meta <- pbmc_small@meta.data
gene_names <- rownames(pbmc_counts)
pbmc_FitGoM <- FitGoM(t(pbmc_counts), K=4)
omega <- pbmc_FitGoM$fit$omega
annotation <- data.frame(sample_id = rownames(omega),
tissue_label = paste0("topic", 1:4))
colnames(omega) <- paste0("topic", 1:4)
rownames(omega) <- annotation$sample_id;
StructureGGplot(omega = omega,
annotation = annotation,
palette = RColorBrewer::brewer.pal(4, "Dark2"),
yaxis_label = "Cells",
order_sample = TRUE,
axis_tick = list(axis_ticks_length = .1,
axis_ticks_lwd_y = .1,
axis_ticks_lwd_x = .1,
axis_label_size = 7,
axis_label_face = "bold"))
## Add Topic Scores to Meta Data Part of the Seurat Object
pbmc_small@meta.data <- cbind(pbmc_meta, omega)
theta_mat <- pbmc_FitGoM$theta
top_features <- ExtractTopFeatures(theta_mat,
top_features=100,
method="poisson",
options="min")
theta_mat <- pbmc_FitGoM$fit$theta
top_features <- ExtractTopFeatures(theta_mat,
top_features=100,
method="poisson",
options="min")
gene_list <- do.call(rbind, lapply(1:dim(top_features$indices)[1],
function(x) deng.gene_names[top_features$indices[x,]]))
pbmc_small@meta.data
pbmc_small@meta.data %>% group_by(res.1) %>% summarise(mean(topic1))
pbmc_small@meta.data[,1:10] %>% group_by(res.1) %>% summarise(mean(topic1))
pbmc_small@meta.data[,1:10] %>%
group_by(res.1) %>%
summarise(topic1 = mean(topic1),
topic2 = mean(topic2),
topic3 = mean(topic3),
topic4 = mean(topic4))
?RunUMAP
?ClassifyCells
test.pbmc <- SubsetData(object = pbmc_small, cells.use = pbmc_small@cell.names[1:10])
train.pbmc <- SubsetData(object = pbmc_small, cells.use = pbmc_small@cell.names[11:80])
predicted.classes <- ClassifyCells(
object = train.pbmc,
training.classes = train.pbmc@ident,
new.data = test.pbmc@data
)
predicted.classes$
?
predicted.classes
test.pbmc@ident
?GetCentroids
pmbc_small <- GetCentroids(pbmc_small, cells.use=pbmc_small@cell.names)
PCHeatmap(object = pbmc,
pc.use = 1,
cells.use = 50,
do.balanced = TRUE,
label.columns = FALSE)
library(ggplot2)
x1 <- rnorm(10000, 0, 1)
x2 <- rnorm(10000, 1, 1)
d <- data.frame(x1,x2)
ggplot(d, aes(x1))
x1
d
ggplot(d, aes(x1)) + geom_density()
ggplot(d, aes(x1)) + geom_density() + geom_density(aes(x2))
x2 <- rnorm(10000, 2, 1)
d
d <- data.frame(x1,x2)
ggplot(d, aes(x1)) + geom_density() + geom_density(aes(x2))
ggplot(d, aes(x1)) + geom_density() + geom_density(aes(x2)) + theme_bw()
ggplot(d, aes(x1)) + geom_density() + geom_density(aes(x2)) + theme_minimal()
ggplot(d, aes(x1)) + geom_density() + geom_density(aes(x2)) + theme_void()
x2 <- rnorm(100000, 2, 1)
x1 <- rnorm(100000, 0, 1)
d <- data.frame(x1,x2)
ggplot(d, aes(x1)) + geom_density() + geom_density(aes(x2)) + theme_void()
getwd()
bookdown::render_book('.')
bookdown::render_book('.')
bookdown::render_book('.')
bookdown::render_book('.')
library(Seurat)
library(dplyr)
library(ggplot2)
library(CountClust)
pbmc <- pbmc_small
# pbmc@ident <- factor()
pbmc@meta.data
dim(pbmc@meta.data)
## randomly making a batch id data.frame
batch_ids <- data.frame(rownames(pbmc@meta.data), batch_id = sample(0:2, 80, replace = TRUE))
rownames(batch_ids) <- rownames(pbmc@meta.data)
batch_ids <- data.frame(rownames(pbmc@meta.data), batch_id = sample(0:2, 80, replace = TRUE))
rownames(batch_ids) <- rownames(pbmc@meta.data)
pbmc@meta.data <- merge(pbmc@meta.data, batch_ids)
pbmc@meta.data
sample(0:2, 80, replace = TRUE)
library(Seurat)
library(dplyr)
library(ggplot2)
library(CountClust)
pbmc <- pbmc_small
# pbmc@ident <- factor()
batch_ids <- data.frame(barcode = rownames(pbmc@meta.data), batch_id = sample(0:2, 80, replace = TRUE))
rownames(batch_ids) <- rownames(pbmc@meta.data)
pbmc@meta.data <- merge(pbmc@meta.data, batch_ids)
pbmc@meta.data
View(pbmc@meta.data)
## randomly making a batch id data.frame
batch_ids <- data.frame(barcode = rownames(pbmc@meta.data), batch_id = sample(0:2, 80, replace = TRUE))
rownames(batch_ids) <- rownames(pbmc@meta.data)
pbmc@meta.data$barcode <- rownames(pbmc@meta.data)
rownames(batch_ids) <- rownames(pbmc@meta.data)
pbmc@meta.data$barcode <- rownames(pbmc@meta.data)
pbmc@meta.data <- merge(pbmc@meta.data, batch_ids, by = 'barcode')
library(Seurat)
library(dplyr)
library(ggplot2)
library(CountClust)
pbmc <- pbmc_small
# pbmc@ident <- factor()
rm(batch_ids)
View(pbmc@meta.data)
## randomly making a batch id data.frame
batch_ids <- data.frame(barcode = rownames(pbmc@meta.data), batch_id = sample(0:2, 80, replace = TRUE))
View(batch_ids)
rownames(batch_ids) <- rownames(pbmc@meta.data)
pbmc@meta.data$barcode <- rownames(pbmc@meta.data)
pbmc@meta.data <- merge(pbmc@meta.data, batch_ids, by = 'barcode')
View(pbmc@meta.data)
pbmc <- ScaleData(object = pbmc, vars.to.regress = 'batch_id)
pbmc <- ScaleData(object = pbmc, vars.to.regress = 'batch_id')
pbmc <- ScaleData(object = pbmc, vars.to.regress = 'batch_id')
## randomly making a batch id data.frame
batch_ids <- data.frame(barcode = rownames(pbmc@meta.data), batch_id = sample(0:2, 80, replace = TRUE))
rownames(batch_ids) <- rownames(pbmc@meta.data)
pbmc@meta.data$barcode <- rownames(pbmc@meta.data)
pbmc@meta.data <- merge(pbmc@meta.data, batch_ids, by = 'barcode')
pbmc <- ScaleData(object = pbmc, vars.to.regress = 'batch_id')
pbmc@meta.data
str(batch_ids)
str(pbmc@meta.data)
library(Seurat)
library(dplyr)
library(ggplot2)
library(CountClust)
pbmc <- pbmc_small
# pbmc@ident <- factor()
str(pbmc@meta.data)
pbmc@meta.data$barcode <- row.names(pbmc@meta.data)
str(pbmc@meta.data)
## batch_ids <- read.csv('file_with_batch_ids.csv')
## randomly making a batch id data.frame
batch_ids <- data.frame(barcode = rownames(pbmc@meta.data),
batch_id = sample(0:2, 80, replace = TRUE),
stringsAsFactors = FALSE)
row.names(batch_ids) <- row.names(pbmc@meta.data)
pbmc@meta.data$barcode <- row.names(pbmc@meta.data)
pbmc@meta.data <- merge(pbmc@meta.data, batch_ids, by = 'barcode')
pbmc <- ScaleData(object = pbmc, vars.to.regress = 'batch_id')
## batch_ids <- read.csv('file_with_batch_ids.csv')
## randomly making a batch id data.frame
batch_ids <- data.frame(barcode = rownames(pbmc@meta.data),
batch_id = sample(0:2, 80, replace = TRUE),
stringsAsFactors = FALSE)
row.names(batch_ids) <- row.names(pbmc@meta.data)
pbmc@meta.data$barcode <- row.names(pbmc@meta.data)
pbmc@meta.data <- merge(pbmc@meta.data, batch_ids, by = 'barcode')
pbmc <- ScaleData(object = pbmc, vars.to.regress = 'batch_ids')
## batch_ids <- read.csv('file_with_batch_ids.csv')
## randomly making a batch id data.frame
batch_ids <- data.frame(barcode = rownames(pbmc@meta.data),
batch_id = sample(0:2, 80, replace = TRUE),
stringsAsFactors = FALSE)
row.names(batch_ids) <- row.names(pbmc@meta.data)
pbmc@meta.data$barcode <- row.names(pbmc@meta.data)
pbmc@meta.data <- merge(pbmc@meta.data, batch_id, by = 'barcode')
library(Seurat)
library(dplyr)
library(ggplot2)
library(CountClust)
pbmc <- pbmc_small
pbmc@meta.data$barcode <- row.names(pbmc@meta.data)
# pbmc@ident <- factor()
## batch_ids <- read.csv('file_with_batch_ids.csv')
## randomly making a batch id data.frame
batch_ids <- data.frame(barcode = rownames(pbmc@meta.data),
batch_id = sample(0:2, 80, replace = TRUE),
stringsAsFactors = FALSE)
row.names(batch_ids) <- row.names(pbmc@meta.data)
pbmc@meta.data <- merge(pbmc@meta.data, batch_id, by = 'barcode')
pbmc@meta.data
pbmc@meta.data <- merge(pbmc@meta.data, batch_ids, by = 'barcode')
pbmc <- ScaleData(object = pbmc, vars.to.regress = 'batch_id')
pbmc@meta.data
pbmc <- AddMetaData(pbmc, batch_ids)
pbmc <- ScaleData(object = pbmc, vars.to.regress = 'batch_id')
library(Seurat)
library(dplyr)
library(ggplot2)
library(CountClust)
pbmc <- pbmc_small
pbmc@meta.data$barcode <- row.names(pbmc@meta.data)
# pbmc@ident <- factor()
# The number of genes and UMIs (nGene and nUMI) are automatically calculated
# for every object by Seurat.  For non-UMI data, nUMI represents the sum of
# the non-normalized values within a cell We calculate the percentage of
# mitochondrial genes here and store it in percent.mito using AddMetaData.
# We use object@raw.data since this represents non-transformed and
# non-log-normalized counts The % of UMI mapping to MT-genes is a common
# scRNA-seq QC metric.
mito.genes <- grep(pattern = "^MT-", x = rownames(x = pbmc@data), value = TRUE)
percent.mito <- Matrix::colSums(pbmc@raw.data[mito.genes, ])/Matrix::colSums(pbmc@raw.data)
# AddMetaData adds columns to object@meta.data, and is a great place to
# stash QC stats
pbmc <- AddMetaData(object = pbmc, metadata = percent.mito, col.name = "percent.mito")
##VlnPlot(object = pbmc, features.plot = c("nGene", "nUMI"), "percent.mito"), nCol = 3)
## batch_ids <- read.csv('file_with_batch_ids.csv')
## randomly making a batch id data.frame
batch_ids <- data.frame(barcode = rownames(pbmc@meta.data),
batch_id = sample(0:2, 80, replace = TRUE),
stringsAsFactors = FALSE)
row.names(batch_ids) <- row.names(pbmc@meta.data)
pbmc <- AddMetaData(object = pbmc, metadata = batch_idso, col.name = "batch_id")
## batch_ids <- read.csv('file_with_batch_ids.csv')
## randomly making a batch id data.frame
batch_ids <- data.frame(barcode = rownames(pbmc@meta.data),
batch_id = sample(0:2, 80, replace = TRUE),
stringsAsFactors = FALSE)
row.names(batch_ids) <- row.names(pbmc@meta.data)
pbmc <- AddMetaData(object = pbmc, metadata = batch_ids, col.name = "batch_id")
pbmc <- ScaleData(object = pbmc, vars.to.regress = 'batch_id')
bookdown::render_book('.')
library(Seurat)
batch_ids <- data.frame(barcode = rownames(pbmc@meta.data),
batch_id = sample(0:2, 80, replace = TRUE),
stringsAsFactors = FALSE)
View(batch_ids)
View(pbmc@meta.data)
write.csv(pbmc@meta.data, "pbmc_meta_data.csv")
subset("ACTAGGAGAA", 1:4)
substring("ACTAGGAGAA", 1:4)
substring("ACTAGGAGAA", first = 1, last = 4)
?AddMetaData

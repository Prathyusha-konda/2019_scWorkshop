[
["index.html", "ANALYSIS OF SINGLE CELL RNA-SEQ DATA 1 Introduction 1.1 COURSE OVERVIEW 1.2 TARGETED AUDIENCE &amp; ASSUMED BACKGROUND 1.3 COURSE FORMAT 1.4 Getting Started 1.5 SESSION CONTENT", " ANALYSIS OF SINGLE CELL RNA-SEQ DATA Orr Ashenberg Dana Silverbush Kirk Gosik 2019-02-26 1 Introduction 1.1 COURSE OVERVIEW In recent years single cell RNA-seq (scRNA-seq) has become widely used for transcriptome analysis in many areas of biology. In contrast to bulk RNA-seq, scRNA-seq provides quantitative measurements of the expression of every gene in a single cell. However, to analyze scRNA-seq data, novel methods are required and some of the underlying assumptions for the methods developed for bulk RNA-seq experiments are no longer valid. In this course we will cover all steps of the scRNA-seq processing, starting from the raw reads coming off the sequencer. The course includes common analysis strategies, using state-of-the-art methods and we also discuss the central biological questions that can be addressed using scRNA-seq. 1.2 TARGETED AUDIENCE &amp; ASSUMED BACKGROUND This course is aimed at researchers and technical workers who are or will be analyzing scRNA-seq data. The material is suitable both for experimentalists who want to learn more about data-analysis as well as computational biologists who want to learn about scRNASeq methods. Examples demonstrated in this course can be applied to any experimental protocol or biological system. The requirements for this course are: 1. Working knowledge of unix (managing files, running programs) 2. Programming experience in R (writing a function, basic I/O operations, variable types, using packages). Bioconductor experience is a plus. 3. Familiarity with next-generation sequencing data and its analyses (using alignment and quantification tools for bulk sequencing data) 1.3 COURSE FORMAT The course will be delivered over the course of five days. Each day will include a lecture and laboratory component. The lecture will introduce the topics of discussion and the laboratory sessions will be focused on practical hands-on analysis of scRNA-seq data. These sessions will involve a combination of both mirroring exercises with the instructor to demonstrate a skill as well as applying these skills on your own to complete individual exercises. After and during each exercise, interpretation of results will be discussed as a group. Computing will be done using a combination of tools installed on the attendees laptop computer and web resources accessed via web browser. 1.4 Getting Started 1.5 SESSION CONTENT 1.5.1 Monday – Classes from 09:30 to 17:30 (lunch break-1 hr, 40 min of total coffee breaks) 1.5.1.1 Lecture 1 – scRNA-Seq experimental design Overview of course (intros, 20 min) General introduction: HCA/KCO overview Comparison of Bulk and single cell RNA-Seq Overview of available scRNA-seq technologies (10x) and experimental protocols scRNA-Seq experimental design and analysis workflow? 1.5.1.2 Lab 1 – Understanding sequencing raw data Lab based around data wrangling from public data repositories: get data from 10x website, single cell portal, from GEO (fastqs, counts) Shell and Unix commands to navigate directories, create folders, open files Raw file formats 1.5.1.3 Lecture 2 - Intro to Data processing: from bcl file to bam file scRNA-Seq processing workflow starting with choice of sequencer (NextSeq, HiSeq, MiSeq) / barcode swapping and bcl files Overview of Popular tools and algorithms Common single-cell analyses and interpretation Sequencing data: alignment and quality control Looking at cool things in alignment like where reads are, mutations, splicing 1.5.1.4 Lab 2 – Processing raw scRNA-Seq data Data outputs from different scRNAseq technologies (10x, Smart-seq2) - process both? Demultiplexing sequencing data Read Quality Control (CellRanger, dropEst, fastqc) Run bowtie2 on 2 wells to demonstrate alignment Read alignment and visualization (kallisto, RSEM, Igviewer) http://hemberg-lab.github.io/scRNA.seq.course/processing-raw-scrna-seq-data.html Chapters 3 and 4? Are there parts that supposed to be in labs 1 or 3? Demultiplexing FastQC Align (STAR/TOPHAT/Kallisto) IGViewer - what do we want here? I use it for mutation detections, copying sequences, searching for alternative splicing. Flash talks (1.5 hr, break into 2 groups of 13) small presentation about your genome assembly and annotation project, ideally do 3 slides -2/3 mins (powerpoint or similar). So you can introduce yourselves and we can get to know each other. 1.5.2 Tuesday – Classes from 09:30 to 17:30 1.5.2.1 Lecture 3 – Transcriptome quantification: from bam file to counts Read &amp; UMI counting (Kallisto alignment-free pseudocounts as well), how RSEM works (length dependence, sequencing depth, multimapping reads), CellRanger (dropest), bustools 10x barcode structure and links to Perturb-seq Gene length &amp; coverage Gene expression units (count data Smart-seq2 counts or 10x UMIs vs expression data) Some R overview slides, https://r4ds.had.co.nz/ 1.5.2.2 Lab 3 - Introduction to R Installing packages Data-types Data manipulation, slicing Strings manipulations Introducing object oriented programming / S4 objects Visualization tools Bonus create FeaturePlot from Seurat in base ggplot Bonus: run RSEM on Dana’s bam files if you are bored 1.5.2.3 Lecture 4 - Expression QC, normalisation and batch correction What CellRanger does for quality filtering PBMC data normalisation methods https://www.nature.com/articles/nmeth.4292 Doublets, empty droplets Barcode swapping Regression with technical covariates What about imputation? 1.5.2.4 Lab 4 – Data wrangling for scRNAseq data Data structures and file formats for single-cell data Quality control of cells and genes (doublets, ambient, empty drops) Data exploration: violin plots… Introducing Seurat object Genes House keeping genes Mitochondrial genes (never used these ones) Filter - Do we remove both cells and genes here? Normalize (introduce more options, other than log transform?) Find variable genes (Is it a first reduction? Why the binning?) Scaling Regression Heatmap of desired genes? Sigantures? http://hemberg-lab.github.io/scRNA.seq.course/introduction-to-rbioconductor.html 9.1 - 9.5? Bonus - imputation (magic? One of the two Gocken recommended?) Flash talks (1.5 hr, break into 2 groups of 13) small presentation about your genome assembly and annotation project, ideally do 3 slides -2/3 mins (powerpoint or similar). So you can introduce yourselves and we can get to know each other. 1.5.3 Wednesday – Classes from 09:30 to 17:30 1.5.3.1 Lecture 5 - Identifying cell populations Feature selection Dimensionality reduction Clustering and assigning identity (Louvain, NMF, topic models, variational autoencoder) Differential expression tests 1.5.3.2 Lab 5 – Feature selection &amp; Clustering analysis Parameters and clustering Comparison of feature selection methods 1.5.3.3 Lecture 6 - Introduction to batch effects Batch correction methods (regress out batch, scaling within batch, CCA, MNN, Liger, scvi, scgen) Evaluation methods for batch correction (ARI, average silhouette width, kBET…) 1.5.3.4 Lab 6 - Correcting batch effects Comparison of batch correction methods, Seurat pancreas Poster session with beer &amp; wine (time?) poster of current or proposed single cell genomic study. Print out would be good (recent posters are fine), or if you haven’t got a recent one, just a quick one pulled together on powerpoint and printed out on A4 is okay too - you shouldn’t stress too much about this, it’s just to connect the flash talks to the posters and it will be absolutely informal (unlike a poster session at a conference!). Take notes on how to do single-cell analysis, ideas, challenges, things you find interesting, directions you would like to explore. 1.5.4 Thursday – Classes from 09:30 to 17:30 Post poster session discussion groups 30 min discussion wrapping up poster session, and keeping track of ideas in a shared Google doc 1.5.4.1 Lecture 7 - Advanced topics: Functional analysis of cell sub-populations Gene sets and signatures Pathway analysis inferCNV / honeybadger 1.5.4.2 Lecture 7 - Advanced topics: Pseudotime cell trajectories Waddington Landscape Pseudotime inference Differential expression through pseudotime Lecture 7 - Advanced topics: Spatial genomics, multiplexing? 1.5.4.3 Lab 8 - Functional and Pseudotime analysis Popular tools and packages for functional analysis (https://github.com/dynverse/dynmethods#list-of-included-methods) Review concepts from papers Comparison of pseudotime methods https://github.com/velocyto-team/velocyto.R 1.5.4.4 Lecture 8 - Single-cell multiomic technologies Introduction to other omic data types Integrating scRNA-seq with other single-cell modalities (CITE, Perturb, ATAC, methylation…) 1.5.4.5 Lab 9 - Analysis of CITE-seq, scATAC-seq https://github.com/Hoohm/CITE-seq-Count https://cite-seq.com/eccite-seq/ https://support.10xgenomics.com/single-cell-vdj/index/doc/technical-note-assay-scheme-and-configuration-of-chromium-single-cell-vdj-libraries https://satijalab.org/seurat/multimodal_vignette.html https://www.bioconductor.org/packages/devel/bioc/vignettes/cicero/inst/doc/website.html 1.5.5 Friday – Classes from 09:30 to 17:30 1.5.5.1 Lab 10 - small dataset for analysis Karthik has a good starting point: Krumlov_lab2_guidelines.html and Hemberg lab http://hemberg-lab.github.io/scRNA.seq.course/advanced-exercises.html Present a set of methods and orders in which to try them IDH mutated glioma Goal for first half: get to clustering and identify malignant cells (inferCNV possible) Goal for second half: cell states For our other courses, the last day we usually divide them in groups of 3-4 ppl and assign them a small dataset in order to repeat all the analyses they have learnt during the week, to think about the best strategy to carry out the analyses and to present the results in front of the other ppl. I believe this is something very productive and helpful because it is a kind of wrap-up and brainstorming session. Normally, ppl love to talk and present something and in this way they/we can be 100% sure they really understood the different steps of the pipeline. Lecture 9 - Group presentations Review, Questions and Answers "],
["scrna-seq-experimental-design.html", "2 scRNA-Seq Experimental Design", " 2 scRNA-Seq Experimental Design "],
["understanding-sequencing-raw-data.html", "3 Understanding Sequencing Raw Data 3.1 Class Environment 3.2 Shell and Unix commands 3.3 File formats 3.4 Public data repositories", " 3 Understanding Sequencing Raw Data 3.1 Class Environment 3.1.1 Getting into AWS Instance ## Example ssh -i berlin.pem ubuntu@&lt;PUBLIC IP ADDRESS&gt; (e.g.34.219.254.245) ## Actual Command ssh -i berlin.pem ubuntu@34.213.180.241 3.2 Shell and Unix commands 3.2.1 Common Linux Commands 3.2.1.1 Lab 1a check the your present directory pwd check history history pipe history to grep to search for the cd command history | grep cd put history into a history.txt file history &gt; history.txt make a directory called data mkdir data change into data directory cd data move history.txt file into data directory mv ../history.txt ./ check manual page of wget command man wget redirect wget maunual page output into a file called wget.txt man wget &gt; wget.txt return the lines that contain output in the wget.txt file cat wget.txt | grep output grep -i output wget.txt Compress wget.txt file gzip wget.txt View Compressed file cat wget.txt.qz zcat wget.txt.qz zcat wget.txt.qz | less 3.2.1.2 Docker Commands Consistent compute enviornment to ensure all software that you need is on the machine and able to be used. change directory to your user directory run following command to start docker ## maybe take away the --rm so you can save the container for later ## run from your home directory cd docker run --rm -it -v $PWD/Share:/Share -v $PWD:/mydir kdgosik/scellbern2019 bash Explaination of commands - docker: command to run docker - run: asking docker to run a container - --rm: flag to remove the container when you exit from it - nothing will be saved from your session to access again later - this flag can be removed to keep container - -it: flag to run the container interactively - this will keep all session output displaying on the terminal - to stop container go to terminal and press Crtl+c -v $PWD/Share:/Share: map the share directory from AWS to Share inside docker container -v $PWD:/mydir: map your home directory to a directory inside docker container called home - kdgosik/scellbern2019: the image to run. It will be the image into a container if not already built on your computer - [image link](https://hub.docker.com/r/kdgosik/scellbern2019) 3.3 File formats bcl fastq bam mtx, tsv hdf5 (.h5, .h5ad) 3.3.1 View FASTQ Files 3.3.1.1 Viewing entire file cat /Share/data/Teichmann_2i_2_2_2.fastq 3.3.1.2 Viewing first 10 lines head /Share/data/Teichmann_2i_2_2_2.fastq 3.3.1.3 Stream Viewing with less command less /Share/data/Teichmann_2i_2_2_2.fastq 3.3.2 View BAM Files 3.3.2.1 Viewing first 10 lines samtools view /Share/data/pbmc_1k_protein_v3_possorted_genome_bam.bam | head 3.3.2.2 Stream Viewing with less command samtools view /Share/data/pbmc_1k_protein_v3_possorted_genome_bam.bam | less 3.4 Public data repositories 3.4.1 Cellranger/10x 3.4.1.1 Lab 1b 10x PBMC data are hosted in https://s3-us-west-2.amazonaws.com/10x.files/samples/cell/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz change directory into the data directory get 10x PBMC data unzip data explore directory explore files mkdir data wget https://s3-us-west-2.amazonaws.com/10x.files/samples/cell/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz -O data/pbmc3k_filtered_gene_bc_matrices.tar.gz cd data; tar -xzf pbmc3k_filtered_gene_bc_matrices.tar.gz cd .. 3.4.2 GEO https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE81905 3.4.2.1 Lab 1c Get GEO Data - ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE81nnn/GSE81905/matrix/GSE81905-GPL19057_series_matrix.txt.gz - ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE81nnn/GSE81905/matrix/GSE81905-GPL17021_series_matrix.txt.gz make a directory for the files or use data directory go into that directory get files and place them in the directory View files (try keeping in compressed format and view that way) bash cd data wget https://s3-us-west-2.amazonaws.com/10x.files/samples/cell/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz -O data/pbmc3k_filtered_gene_bc_matrices.tar.gz cd data; tar -xzf pbmc3k_filtered_gene_bc_matrices.tar.gz cd .. 3.4.3 Single Cell Portal https://portals.broadinstitute.org/single_cell Study: Salk Institute - Single-cell Methylome Sequencing Identifies Distinct Neuronal Populations in Mouse Frontal Cortex 3.4.3.1 Lab 1d Get R2 fastq file from the Salk Institute study Look at files 3.4.3.2 Lab 1e Get Docker on your local computer for you to have Explore Single Cell Portal Explore GEO "],
["data-preprocessing.html", "4 Data Preprocessing", " 4 Data Preprocessing "],
["processing-scrnaseq-data.html", "5 Processing scRNAseq Data 5.1 Goal 5.2 Further reading 5.3 FastQC 5.4 Align the reads 5.5 Visualization", " 5 Processing scRNAseq Data 5.1 Goal To give you experience with examining and aligning fastq files 5.2 Further reading This lab is based on a lab given in: http://hemberg-lab.github.io/scRNA.seq.course/processing-raw-scrna-seq-data.html For more exercises and ideas please visit their web-site! 5.3 FastQC Once you’ve obtained your single-cell RNA-seq data, the first thing you need to do with it is check the quality of the reads you have sequenced. For this task, today we will be using a tool called FastQC. FastQC is a quality control tool for sequencing data, which can be used for both bulk and single-cell RNA-seq data. FastQC takes sequencing data as input and returns a report on read quality. Copy and paste this link into your browser to visit the FastQC website: https://www.bioinformatics.babraham.ac.uk/projects/fastqc/ This website contains links to download and install FastQC and documentation on the reports produced. Fortunately we have already installed FastQC for you today, so instead we will take a look at the documentation. Scroll down the webpage to ‘Example Reports’ and click ‘Good Illumina Data’. This gives an example of what an ideal report should look like for high quality Illumina reads data. Now let’s make a FastQC report ourselves. Today we will be performing our analysis using a single cell from an mESC dataset produced by (Kolodziejczyk et al. 2015). The cells were sequenced using the SMART-seq2 library preparation protocol and the reads are paired end. The files are located in Share. Now let’s look at the files: less Share/data/Teichmann_2i_2_2_1.fastq less Share/data/Teichmann_2i_2_2_2.fastq We run fastqc from /usr/local/src/FastQC. You may need to give yourself permissions to run the file (hint: chmod) Task 1: Try to work out what command you should use to produce the FastQC report. Hint: Try executing ./usr/local/src/FastQC/fastqc -h This command will tell you what options are available to pass to FastQC. Let us direct our output to our personal directories (under the folder results). Feel free to ask for help if you get stuck! If you are successful, you should generate a .zip and a .html file for both the forwards and the reverse reads files. Once you have been successful, feel free to have a go at the next section. Once the command has finished executing, you should have a total of four files - one zip file for each of the paired end reads, and one html file for each of the paired end reads. The report is in the html file. To view it, we will need to get it off AWS and onto your computer using either filezilla or scp. Ask an instructor if you are having difficulties. scp command is: scp -r -i &lt;your pem file&gt; &lt;username&gt;@ec2-34-213-180-241.us-west-2.compute.amazonaws.com:~/&lt;file to copy&gt; &lt;destination in your computer&gt; We shared a dropbox folder with you with an example outout files. If scp become complicated you can download the results from there. Once the file is on you computer, click on it. Your FastQC report should open. Have a look through the file. Remember to look at both the forwards and the reverse end read reports! How good quality are the reads? Is there anything we should be concerned about? Feel free to chat to one of the instructors about your ideas. 5.3.1 Fastq file format FastQ is the most raw form of scRNASeq data you will encounter. All scRNASeq protocols are sequenced with paired-end sequencing. Barcode sequences may occur in one or both reads depending on the protocol employed. However, protocols using unique molecular identifiers (UMIs) will generally contain one read with the cell and UMI barcodes plus adapters but without any transcript sequence. Thus reads will be mapped as if they are single-end sequenced despite actually being paired end. FastQ files have the format: &gt;ReadID READ SEQUENCE + SEQUENCING QUALITY SCORES 5.4 Align the reads 5.4.1 STAR align Now we have established that our reads are of good quality, we would like to map them to a reference genome. This process is known as alignment. Some form of alignment is generally required if we want to quantify gene expression or find genes which are differentially expressed between samples. Many tools have been developed for read alignment, but today we will focus on STAR. For each read in our reads data, STAR tries to find the longest possible sequence which matches one or more sequences in the reference genome. Because STAR is able to recognize splicing events in this way, it is described as a ‘splice aware’ aligner. Usually STAR aligns reads to a reference genome, potentially allowing it to detect novel splicing events or chromosomal rearrangements. However, one issue with STAR is that it needs a lot of RAM, especially if your reference genome is large (eg. mouse and human). To speed up our analysis today, we will use STAR to align reads from to a reference transcriptome of 2000 transcripts. Note that this is NOT normal or recommended practice, we only do it here for reasons of time. We recommend that normally you should align to a reference genome. Two steps are required to perform STAR alignment. In the first step, the user provides STAR with reference genome sequences (FASTA) and annotations (GTF), which STAR uses to create a genome index. In the second step, STAR maps the user’s reads data to the genome index. Let’s create the index now. Remember, for reasons of time we are aligning to a transcriptome rather than a genome today, meaning we only need to provide STAR with the sequences of the transcripts we will be aligning reads to. You can obtain transcriptomes for many model organisms from Ensembl (https://www.ensembl.org/info/data/ftp/index.html). Task 2: Create a genome index First create the output folder for the index in your personal folder under results (recommended STAR/indices). We run STAR from: /usr/local/src/STAR/bin/Linux_x86_64 using the command: ./usr/local/src/STAR/bin/Linux_x86_64/STAR --runThreadN 4 --runMode genomeGenerate --genomeDir &lt;output STAR indices folder&gt; --genomeFastaFiles Share/data/2000_reference.transcripts.fa Task 3: What does each of the options we used do? Hint: Use the STAR manual to help you (https://github.com/alexdobin/STAR/blob/master/doc/STARmanual.pdf) Now that we have created the index, we can perform the mapping step. Task 4: Try to work out what command you should use to map our fastq files to the index you created. Use the STAR manual to help you. Once you think you know the answer use ./STAR command to align the fastq files to a BAM file. You can either create a SAM file and convert it to BAM using samtools, or use STAR to directly output a BAM file (–outSAMtype BAM Unsorted) The alignment may take awhile, if you wish to you can complete tasks 7-10 in the meanwhile. Task 5: Try to understand the output of your alignment. Talk to one of the instructors if you need help! 5.4.2 Bam file format BAM file format stores mapped reads in a standard and efficient manner. The human-readable version is called a SAM file, while the BAM file is the highly compressed version. BAM/SAM files contain a header which typically includes information on the sample preparation, sequencing and mapping; and a tab-separated row for each individual alignment of each read. Alignment rows employ a standard format with the following columns: QNAME : read name (generally will include UMI barcode if applicable) FLAG : number tag indicating the “type” of alignment, link to explanation of all possible “types” RNAME : reference sequence name (i.e. chromosome read is mapped to). POS : leftmost mapping position MAPQ : Mapping quality CIGAR : string indicating the matching/mismatching parts of the read (may include soft-clipping). RNEXT : reference name of the mate/next read PNEXT : POS for mate/next read TLEN : Template length (length of reference region the read is mapped to) SEQ : read sequence QUAL : read quality BAM/SAM files can be converted to the other format using ‘samtools’: samtools view -S -b file.sam &gt; file.bam samtools view -h file.bam &gt; file.sam Some sequencing facilities will automatically map your reads to the a standard genome and deliver either BAM or CRAM formatted files. Generally they will not have included ERCC sequences in the genome thus no ERCC reads will be mapped in the BAM/CRAM file. To quantify ERCCs (or any other genetic alterations) or if you just want to use a different alignment algorithm than whatever is in the generic pipeline (often outdated), then you will need to convert the BAM/CRAM files back to FastQs: BAM files can be converted to FastQ using bedtools. To ensure a single copy for multi-mapping reads first sort by read name and remove secondary alignments using samtools. Picard also contains a method for converting BAM to FastQ files. To make our aligned BAM file easy to navigate (needed for IGViewer) we will sort and index it using samtools. Sam tools can be run from everywhere (no need to go to a special directory!) using the command: samtools Let us start by sorting the BAM file: samtools sort Aligned.out.bam -o Aligned.out.sorted.bam Task 6: can you index the file? hint: try looking at samtools -h Once you sorted and indexed the files you should have a BAM and a bai files. The BAM file is the aligned reads, and the bai is an index file. To view them in IGViewer (IGV) first copy them into your computer. Go ahead and copy the fa file as well, we will need a reference genome file. 5.5 Visualization To view the file we will use the IGV you installed on your personal computer. Open IGV: the default genomes are human HG19 and HG38. Through the class we will be using the PBMC dataset. You have the BAM file in your data folder. Go ahead and transfer it to your computer and upload it to IGV with hg38 as reference genome. Task 7: Browse to MS4A1, this is a blood cell marker. Can you see the exons and the introns? Where are most of the aligned reads? Task 8: Search in IGV or online - can you present splice junctions? (right click -&gt; “Show splice junction track”) Task 9: Try further tasks that interest you in IGV. For example, can you detect reads that are within one exon and reads that start in one exon and continue in the next? Can you copy the sequence of exon2 in MS4A1? Task 10: What would have happened if you chose the wrong reference genome, such as hg19? Bonus (IGV sometimes has difficulties loading small fa files. So if this becomes difficult - don’t worry! It’s not your alignment): The default genomes are human HG19 and HG38. However you can also upload your reference genome of choice. As we created our own fasta file we can now upload it as a reference genome. Task 11: Load new genome: go to “Genomes”-&gt;”Load from file” and load the file 2000_reference.transcripts.fa Task 12: Now load your reads: go to “File”-&gt;”Load from file” and load your BAM file. Notice that IGV needs a BAM and a bai saved in the same location. IGV uses the bai to navigate through the BAM file. Task 13: Some of the reads have a nucleotide substitution in position 993 - what is the reference nucleotide? What is the substitution? "],
["transcriptome-quantification.html", "6 Transcriptome Quantification", " 6 Transcriptome Quantification "],
["introduction-rbioconductor.html", "7 Introduction R/Bioconductor 7.1 Start Environment 7.2 Installing packages 7.3 Installation instructions: 7.4 More information 7.5 Grammer of Graphics (ggplot2) 7.6 Reference", " 7 Introduction R/Bioconductor 7.1 Start Environment ## maybe take away the --rm so they can save the container for later ## run from your home directory cd ## example for user99 docker run --rm -it -e PASSWORD=train \\ -v $PWD/Share:/Share \\ -v $PWD:/mydir \\ -p 9099:8787 kdgosik/scellbern2019 Explaination of commands - docker: command to run docker - run: asking docker to run a container - --rm: flag to remove the container when you exit from it - nothing will be saved from your session to access again later - this flag can be removed to keep container - -it: flag to run the container interactively - - this will keep all session output displaying on the terminal - - to stop container go to terminal and press Crtl+c - -v $PWD/Share:/Share: map the share directory from AWS to Share inside docker container - -v $PWD:/mydir: map your home directory to a directory inside docker container called home - -p 9017:8787: map docker container port of 8787(rstudio port default) to your computer port 9017 - kdgosik/scellbern2019: the image to run. It will be the image into a container if not already built on your computer - [image link](https://hub.docker.com/r/kdgosik/scellbern2019) localhost:9099 or on AWS :9099 ec2-.us-west-2.compute.amazonaws.com: ec2-54-202-32-102.us-west-2.compute.amazonaws.com:9099 R/Rstudio parts Data Types and classes Packages and where to get them S3 vs S4 Visualizations and ggplot Installing packages Data-types Data manipulation, slicing Strings manipulations Introducing object oriented programming / S4 objects Visualization tools Bonus create FeaturePlot from Seurat in base ggplot Bonus: run RSEM on Dana’s bam files if you are bored 7.2 Installing packages 7.2.1 CRAN The Comprehensive R Archive Network CRAN is the biggest archive of R packages. There are few requirements for uploading packages besides building and installing succesfully, hence documentation and support is often minimal and figuring how to use these packages can be a challenge it itself. CRAN is the default repository R will search to find packages to install: install.packages(&quot;devtools&quot;) # or multiple packages install.packages(c(&quot;ggplot2&quot;, &quot;stringr&quot;)) 7.2.2 Github Github isn’t specific to R, any code of any type in any state can be uploaded. There is no guarantee a package uploaded to github will even install, nevermind do what it claims to do. R packages can be downloaded and installed directly from github using the “devtools” package installed above. ## username/repository devtools::install_github(&quot;satijalab/seurat&quot;) # latest stable version of Seurat package Github is also a version control system which stores multiple versions of any package. By default the most recent “master” version of the package is installed. If you want an older version or the development branch this can be specified using the “ref” parameter: # different branch devtools::install_github(&quot;satijalab/seurat&quot;, ref=&quot;release3.0&quot;) # previous commit ## Merge branch &#39;develop&#39; into feat/MultiModal ## - Shiwei Zheng committed on Jul 2, 2018 devtools::install_github(&quot;tallulandrews/M3Drop&quot;, ref=&quot;551014f488770627ab154a62e59d49df5df98a3f&quot;) Note: make sure you re-install the M3Drop master branch for later in the course. 7.2.3 Bioconductor Bioconductor is a repository of R-packages specifically for biological analyses. It has the strictest requirements for submission, including installation on every platform and full documentation with a tutorial (called a vignette) explaining how the package should be used. Bioconductor also encourages utilization of standard data structures/classes and coding style/naming conventions, so that, in theory, packages and analyses can be combined into large pipelines or workflows. Bioconductor also requires creators to support their packages and has a regular 6-month release schedule. Make sure you are using the most recent release of bioconductor before trying to install packages for the course. ## &gt;= R 3.5.0 if (!requireNamespace(&quot;BiocManager&quot;, quietly = TRUE)) install.packages(&quot;BiocManager&quot;) BiocManager::install(&quot;Rsamtools&quot;, version = &quot;3.8&quot;, ask = FALSE) 7.2.4 Source The final way to install packages is directly from source. In this case you have to download a fully built source code file, usually packagename.tar.gz, or clone the github repository and rebuild the package yourself. Generally this will only be done if you want to edit a package yourself, or if for some reason the former methods have failed. You can also get previous packages that aren’t supported any more on the CRAN package archive ## Get an old package and install from source install.packages(&quot;GenABEL_1.8-0.tar.gz&quot;, type=&quot;source&quot;) 7.3 Installation instructions: All the packages necessary for this course are available here. A list of the packages will be on the README.md for the repository. A script is also available inside the docker/install.R file. 7.3.1 Classes/Types R is a high level language so the underlying data-type is generally not important. The exception if you are accessing R data directly using another language such as C, but that is beyond the scope of this course. Instead we will consider the basic data classes: numeric, integer, logical, and character, and the higher level data class called “factor”. You can check what class your data is using the “class()” function. 7.3.1.1 Integer x &lt;- 4 ## assign value of 4 to x class(x) ## check class of x ## [1] &quot;numeric&quot; is.integer(x) ## check if x is an integer ## [1] FALSE is.numeric(x) ## check if x is numeric ## [1] TRUE x &lt;- as.numeric(x) ## assign y to be an numeric is.numeric(x) ## check if the assignment worked ## [1] TRUE class(x) ## check if the assignment worked ## [1] &quot;numeric&quot; x ## check value of x ## [1] 4 7.3.1.2 Numeric ## assign value of 1.414 to y ## check class of y ## check if y is numeric ## check if y is an integer ## assign y to be an integer ## check if the assignment worked ## check value of y 7.3.1.3 Logical/ Boolean The logical class stores boolean truth values, i.e. TRUE and FALSE. It is used for storing the results of logical operations and conditional statements will be coerced to this class. Most other data-types can be coerced to boolean without triggering (or “throwing”) error messages, which may cause unexpected behaviour. z &lt;- TRUE ## assign value of TRUE to z class(z) ## check class of z ## [1] &quot;logical&quot; is.logical(z) ## check if z is of logical type ## [1] TRUE 7.3.2 Data structures Homogeneous 1D: atomic vector 2D: matrix nD: array Heterogeneous 1D: list 2D: data.frame 7.3.2.1 Character Vectors ## assign a character vector with c() operator character_vector &lt;- c(&quot;A&quot;, &quot;C&quot;, &quot;T&quot;, &quot;G&quot;, &quot;C&quot;, &quot;T&quot;, &quot;G&quot;, &quot;C&quot;, &quot;G&quot;, &quot;A&quot;, &quot;T&quot;, &quot;G&quot;, &quot;A&quot;, &quot;C&quot;, &quot;G&quot;, &quot;A&quot;, &quot;C&quot;) ## check class class(character_vector) ## [1] &quot;character&quot; ## access the 3rd element with [] operator ## *note*: R is index starts at 1 (other programming languages start at 0) character_vector[3] ## [1] &quot;T&quot; ## access 3rd through 6th elemenet character_vector[3:6] ## [1] &quot;T&quot; &quot;G&quot; &quot;C&quot; &quot;T&quot; ## access the elements 1,4,7,10 with c() character_vector[c(1, 4, 7, 10)] ## [1] &quot;A&quot; &quot;G&quot; &quot;G&quot; &quot;A&quot; ## access all the A&#39;s character_vector[grep(&quot;A&quot;, character_vector)] ## [1] &quot;A&quot; &quot;A&quot; &quot;A&quot; &quot;A&quot; 7.3.2.2 Numeric Vector The “numeric” class is the default class for storing any numeric data - integers, decimal numbers, numbers in scientific notation, etc… ## assign a character vector with c() operator numeric_vector &lt;- c(1, 5, 21, 17, 98, 35, 11, 13) ## check class ## access the 5th element with [] operator ## access 2nd through 4th elemenet ## backticks ` ` allow you to give names with non-typical characters `numeric?_vecotr` &lt;- c(&quot;A&quot;, 1, 5, 21, 17, 98, 35, 11, 13) ## check vector `numeric?_vecotr` ## [1] &quot;A&quot; &quot;1&quot; &quot;5&quot; &quot;21&quot; &quot;17&quot; &quot;98&quot; &quot;35&quot; &quot;11&quot; &quot;13&quot; ## check class (Notice the quotation marks on the numbers!) class(`numeric?_vecotr`) ## [1] &quot;character&quot; 7.3.2.3 Factor Vector String/Character data is very memory inefficient to store, each letter generally requires the same amount of memory as any integer. Thus when storing a vector of strings with repeated elements it is more efficient assign each element to an integer and store the vector as integers and an additional string-to-integer association table. Thus, by default R will read in text columns of a data table as factors. factor_vector &lt;- factor(numeric_vector) factor_vector ## [1] 1 5 21 17 98 35 11 13 ## Levels: 1 5 11 13 17 21 35 98 7.3.2.4 Named Vector names(numeric_vector) &lt;- paste0(&quot;Patient&quot;, 1 : length(numeric_vector)) numeric_vector ## Patient1 Patient2 Patient3 Patient4 Patient5 Patient6 Patient7 Patient8 ## 1 5 21 17 98 35 11 13 7.3.2.5 List ## change the c() operator to list() operator new_list &lt;- list(&quot;A&quot;, 1, 5, 21, 17, 98, 35, 11, 13) new_list ## [[1]] ## [1] &quot;A&quot; ## ## [[2]] ## [1] 1 ## ## [[3]] ## [1] 5 ## ## [[4]] ## [1] 21 ## ## [[5]] ## [1] 17 ## ## [[6]] ## [1] 98 ## ## [[7]] ## [1] 35 ## ## [[8]] ## [1] 11 ## ## [[9]] ## [1] 13 ## get 2nd element of list new_list[[2]] ## [1] 1 names(new_list) &lt;- paste0(&quot;Patient&quot;, 1 : length(new_list)) new_list ## $Patient1 ## [1] &quot;A&quot; ## ## $Patient2 ## [1] 1 ## ## $Patient3 ## [1] 5 ## ## $Patient4 ## [1] 21 ## ## $Patient5 ## [1] 17 ## ## $Patient6 ## [1] 98 ## ## $Patient7 ## [1] 35 ## ## $Patient8 ## [1] 11 ## ## $Patient9 ## [1] 13 ## get 2nd element of list new_list[[2]] ## [1] 1 2D 7.3.2.6 matrix Create Matrix ## create numeric matrix numeric_matrix &lt;- matrix(sample(1:10, 100, replace = TRUE), nrow = 10, ncol = 10) class(numeric_matrix) ## check class ## [1] &quot;matrix&quot; Check Structure str(numeric_matrix) ## int [1:10, 1:10] 7 2 2 1 3 5 8 4 2 6 ... Get 3rd Row ## get 3rd row numeric_matrix[3, ] ## [1] 2 1 1 5 3 8 4 2 10 6 Get 4th Column ## get 4th colum numeric_matrix[, 4] ## [1] 4 2 5 3 9 3 8 8 1 5 7.3.2.7 data.frame Get data.frame ## built in R data.frame iris iris ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa ## 7 4.6 3.4 1.4 0.3 setosa ## 8 5.0 3.4 1.5 0.2 setosa ## 9 4.4 2.9 1.4 0.2 setosa ## 10 4.9 3.1 1.5 0.1 setosa ## 11 5.4 3.7 1.5 0.2 setosa ## 12 4.8 3.4 1.6 0.2 setosa ## 13 4.8 3.0 1.4 0.1 setosa ## 14 4.3 3.0 1.1 0.1 setosa ## 15 5.8 4.0 1.2 0.2 setosa ## 16 5.7 4.4 1.5 0.4 setosa ## 17 5.4 3.9 1.3 0.4 setosa ## 18 5.1 3.5 1.4 0.3 setosa ## 19 5.7 3.8 1.7 0.3 setosa ## 20 5.1 3.8 1.5 0.3 setosa ## 21 5.4 3.4 1.7 0.2 setosa ## 22 5.1 3.7 1.5 0.4 setosa ## 23 4.6 3.6 1.0 0.2 setosa ## 24 5.1 3.3 1.7 0.5 setosa ## 25 4.8 3.4 1.9 0.2 setosa ## 26 5.0 3.0 1.6 0.2 setosa ## 27 5.0 3.4 1.6 0.4 setosa ## 28 5.2 3.5 1.5 0.2 setosa ## 29 5.2 3.4 1.4 0.2 setosa ## 30 4.7 3.2 1.6 0.2 setosa ## 31 4.8 3.1 1.6 0.2 setosa ## 32 5.4 3.4 1.5 0.4 setosa ## 33 5.2 4.1 1.5 0.1 setosa ## 34 5.5 4.2 1.4 0.2 setosa ## 35 4.9 3.1 1.5 0.2 setosa ## 36 5.0 3.2 1.2 0.2 setosa ## 37 5.5 3.5 1.3 0.2 setosa ## 38 4.9 3.6 1.4 0.1 setosa ## 39 4.4 3.0 1.3 0.2 setosa ## 40 5.1 3.4 1.5 0.2 setosa ## 41 5.0 3.5 1.3 0.3 setosa ## 42 4.5 2.3 1.3 0.3 setosa ## 43 4.4 3.2 1.3 0.2 setosa ## 44 5.0 3.5 1.6 0.6 setosa ## 45 5.1 3.8 1.9 0.4 setosa ## 46 4.8 3.0 1.4 0.3 setosa ## 47 5.1 3.8 1.6 0.2 setosa ## 48 4.6 3.2 1.4 0.2 setosa ## 49 5.3 3.7 1.5 0.2 setosa ## 50 5.0 3.3 1.4 0.2 setosa ## 51 7.0 3.2 4.7 1.4 versicolor ## 52 6.4 3.2 4.5 1.5 versicolor ## 53 6.9 3.1 4.9 1.5 versicolor ## 54 5.5 2.3 4.0 1.3 versicolor ## 55 6.5 2.8 4.6 1.5 versicolor ## 56 5.7 2.8 4.5 1.3 versicolor ## 57 6.3 3.3 4.7 1.6 versicolor ## 58 4.9 2.4 3.3 1.0 versicolor ## 59 6.6 2.9 4.6 1.3 versicolor ## 60 5.2 2.7 3.9 1.4 versicolor ## 61 5.0 2.0 3.5 1.0 versicolor ## 62 5.9 3.0 4.2 1.5 versicolor ## 63 6.0 2.2 4.0 1.0 versicolor ## 64 6.1 2.9 4.7 1.4 versicolor ## 65 5.6 2.9 3.6 1.3 versicolor ## 66 6.7 3.1 4.4 1.4 versicolor ## 67 5.6 3.0 4.5 1.5 versicolor ## 68 5.8 2.7 4.1 1.0 versicolor ## 69 6.2 2.2 4.5 1.5 versicolor ## 70 5.6 2.5 3.9 1.1 versicolor ## 71 5.9 3.2 4.8 1.8 versicolor ## 72 6.1 2.8 4.0 1.3 versicolor ## 73 6.3 2.5 4.9 1.5 versicolor ## 74 6.1 2.8 4.7 1.2 versicolor ## 75 6.4 2.9 4.3 1.3 versicolor ## 76 6.6 3.0 4.4 1.4 versicolor ## 77 6.8 2.8 4.8 1.4 versicolor ## 78 6.7 3.0 5.0 1.7 versicolor ## 79 6.0 2.9 4.5 1.5 versicolor ## 80 5.7 2.6 3.5 1.0 versicolor ## 81 5.5 2.4 3.8 1.1 versicolor ## 82 5.5 2.4 3.7 1.0 versicolor ## 83 5.8 2.7 3.9 1.2 versicolor ## 84 6.0 2.7 5.1 1.6 versicolor ## 85 5.4 3.0 4.5 1.5 versicolor ## 86 6.0 3.4 4.5 1.6 versicolor ## 87 6.7 3.1 4.7 1.5 versicolor ## 88 6.3 2.3 4.4 1.3 versicolor ## 89 5.6 3.0 4.1 1.3 versicolor ## 90 5.5 2.5 4.0 1.3 versicolor ## 91 5.5 2.6 4.4 1.2 versicolor ## 92 6.1 3.0 4.6 1.4 versicolor ## 93 5.8 2.6 4.0 1.2 versicolor ## 94 5.0 2.3 3.3 1.0 versicolor ## 95 5.6 2.7 4.2 1.3 versicolor ## 96 5.7 3.0 4.2 1.2 versicolor ## 97 5.7 2.9 4.2 1.3 versicolor ## 98 6.2 2.9 4.3 1.3 versicolor ## 99 5.1 2.5 3.0 1.1 versicolor ## 100 5.7 2.8 4.1 1.3 versicolor ## 101 6.3 3.3 6.0 2.5 virginica ## 102 5.8 2.7 5.1 1.9 virginica ## 103 7.1 3.0 5.9 2.1 virginica ## 104 6.3 2.9 5.6 1.8 virginica ## 105 6.5 3.0 5.8 2.2 virginica ## 106 7.6 3.0 6.6 2.1 virginica ## 107 4.9 2.5 4.5 1.7 virginica ## 108 7.3 2.9 6.3 1.8 virginica ## 109 6.7 2.5 5.8 1.8 virginica ## 110 7.2 3.6 6.1 2.5 virginica ## 111 6.5 3.2 5.1 2.0 virginica ## 112 6.4 2.7 5.3 1.9 virginica ## 113 6.8 3.0 5.5 2.1 virginica ## 114 5.7 2.5 5.0 2.0 virginica ## 115 5.8 2.8 5.1 2.4 virginica ## 116 6.4 3.2 5.3 2.3 virginica ## 117 6.5 3.0 5.5 1.8 virginica ## 118 7.7 3.8 6.7 2.2 virginica ## 119 7.7 2.6 6.9 2.3 virginica ## 120 6.0 2.2 5.0 1.5 virginica ## 121 6.9 3.2 5.7 2.3 virginica ## 122 5.6 2.8 4.9 2.0 virginica ## 123 7.7 2.8 6.7 2.0 virginica ## 124 6.3 2.7 4.9 1.8 virginica ## 125 6.7 3.3 5.7 2.1 virginica ## 126 7.2 3.2 6.0 1.8 virginica ## 127 6.2 2.8 4.8 1.8 virginica ## 128 6.1 3.0 4.9 1.8 virginica ## 129 6.4 2.8 5.6 2.1 virginica ## 130 7.2 3.0 5.8 1.6 virginica ## 131 7.4 2.8 6.1 1.9 virginica ## 132 7.9 3.8 6.4 2.0 virginica ## 133 6.4 2.8 5.6 2.2 virginica ## 134 6.3 2.8 5.1 1.5 virginica ## 135 6.1 2.6 5.6 1.4 virginica ## 136 7.7 3.0 6.1 2.3 virginica ## 137 6.3 3.4 5.6 2.4 virginica ## 138 6.4 3.1 5.5 1.8 virginica ## 139 6.0 3.0 4.8 1.8 virginica ## 140 6.9 3.1 5.4 2.1 virginica ## 141 6.7 3.1 5.6 2.4 virginica ## 142 6.9 3.1 5.1 2.3 virginica ## 143 5.8 2.7 5.1 1.9 virginica ## 144 6.8 3.2 5.9 2.3 virginica ## 145 6.7 3.3 5.7 2.5 virginica ## 146 6.7 3.0 5.2 2.3 virginica ## 147 6.3 2.5 5.0 1.9 virginica ## 148 6.5 3.0 5.2 2.0 virginica ## 149 6.2 3.4 5.4 2.3 virginica ## 150 5.9 3.0 5.1 1.8 virginica Check Class Check Structure Get 3rd Row ## get 3rd row Get 4th Column ## get 4th colum Get 3rd Row ## get 3rd row numeric_matrix[3, ] ## [1] 2 1 1 5 3 8 4 2 10 6 Get Species Variable ## get variable iris$Species ## [1] setosa setosa setosa setosa setosa setosa ## [7] setosa setosa setosa setosa setosa setosa ## [13] setosa setosa setosa setosa setosa setosa ## [19] setosa setosa setosa setosa setosa setosa ## [25] setosa setosa setosa setosa setosa setosa ## [31] setosa setosa setosa setosa setosa setosa ## [37] setosa setosa setosa setosa setosa setosa ## [43] setosa setosa setosa setosa setosa setosa ## [49] setosa setosa versicolor versicolor versicolor versicolor ## [55] versicolor versicolor versicolor versicolor versicolor versicolor ## [61] versicolor versicolor versicolor versicolor versicolor versicolor ## [67] versicolor versicolor versicolor versicolor versicolor versicolor ## [73] versicolor versicolor versicolor versicolor versicolor versicolor ## [79] versicolor versicolor versicolor versicolor versicolor versicolor ## [85] versicolor versicolor versicolor versicolor versicolor versicolor ## [91] versicolor versicolor versicolor versicolor versicolor versicolor ## [97] versicolor versicolor versicolor versicolor virginica virginica ## [103] virginica virginica virginica virginica virginica virginica ## [109] virginica virginica virginica virginica virginica virginica ## [115] virginica virginica virginica virginica virginica virginica ## [121] virginica virginica virginica virginica virginica virginica ## [127] virginica virginica virginica virginica virginica virginica ## [133] virginica virginica virginica virginica virginica virginica ## [139] virginica virginica virginica virginica virginica virginica ## [145] virginica virginica virginica virginica virginica virginica ## Levels: setosa versicolor virginica 7.3.3 Detour to S3/S4 S3 most of R uses Bioconductor requires R packages to be written as S4 objects OO field guide Closer to a typical programming language Classes/Methods and Generics Lots of Generics implemented for Bioinformatics! Different way to access values. Need to use the @ symbol instead of $ ## example object@ 7.3.3.1 Sparse Matrix Triplet format for storing a matrix row, column, value i, p, x Different from base R. Uses the S4 methods that Bioconductor uses. sparse_matrix &lt;- pbmc_small@data[1:10, ] class(sparse_matrix) ## [1] &quot;dgCMatrix&quot; ## attr(,&quot;package&quot;) ## [1] &quot;Matrix&quot; ith row - 1 sparse_matrix@i ## [1] 1 5 8 3 8 8 8 3 8 3 8 8 3 8 8 1 8 0 1 3 4 5 6 8 0 1 2 3 5 6 7 8 9 0 1 ## [36] 2 3 4 5 7 8 0 1 2 3 4 5 7 8 9 0 1 2 3 5 6 7 8 9 0 1 2 3 5 7 9 0 1 2 3 ## [71] 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 8 9 0 1 2 3 4 5 6 7 8 3 6 8 ## [106] 3 5 7 2 6 3 7 8 0 3 8 3 5 2 3 3 5 7 1 3 8 1 8 3 1 8 3 3 3 8 8 8 8 3 8 ## [141] 3 3 8 8 8 1 3 8 3 5 8 1 3 5 1 3 7 1 3 5 7 8 1 3 6 8 3 8 3 5 7 8 1 3 5 ## [176] 6 8 3 7 8 3 5 7 3 5 7 8 3 5 7 1 2 3 4 5 7 8 1 3 5 7 3 5 7 3 5 7 0 3 5 ## [211] 7 2 3 5 7 8 3 5 7 8 3 8 3 3 3 3 3 5 pth column - 1 sparse_matrix@p ## [1] 0 3 5 6 7 9 11 12 14 15 17 24 33 41 50 59 66 ## [18] 75 84 93 102 105 108 110 113 116 116 118 120 123 126 128 129 130 ## [35] 131 132 132 133 134 134 134 134 135 136 137 138 140 141 143 144 145 ## [52] 148 151 154 157 162 166 168 172 177 180 183 187 190 197 201 204 207 ## [69] 211 216 220 221 221 222 222 223 224 225 225 226 228 value sparse_matrix@x ## [1] 4.968821 4.968821 6.062788 4.776153 6.714813 7.143118 6.932079 ## [8] 4.074201 5.161411 4.968821 6.349888 6.844283 4.940848 6.321767 ## [15] 5.954840 4.615121 7.650169 5.779448 5.779448 7.722706 6.183883 ## [22] 5.089387 6.183883 5.779448 4.660719 5.349125 5.571318 7.290953 ## [29] 5.753005 3.976987 5.349125 6.157411 4.660719 5.984036 5.697193 ## [36] 5.293404 7.486153 5.293404 5.293404 4.605269 5.293404 6.666083 ## [43] 6.378826 5.974209 7.225153 6.666083 5.974209 5.283602 6.666083 ## [50] 5.283602 5.313305 5.313305 6.226636 7.323931 5.313305 5.313305 ## [57] 5.313305 6.003987 4.625072 5.190573 5.190573 6.167916 7.419181 ## [64] 6.167916 4.787888 4.103037 6.106491 5.012325 5.012325 6.952515 ## [71] 6.106491 5.702139 5.702139 5.012325 6.106491 5.694729 5.004940 ## [78] 5.917200 7.563681 5.408168 5.004940 4.318475 5.004940 6.099073 ## [85] 5.537982 5.537982 6.451909 7.144267 5.942135 4.848761 4.848761 ## [92] 6.451909 4.848761 5.621232 6.130608 7.004807 7.292262 5.217575 ## [99] 5.217575 5.217575 4.529834 6.466459 5.463405 3.542611 3.542611 ## [106] 6.296873 4.316042 3.243785 3.870125 3.870125 6.072815 3.790760 ## [113] 3.790760 3.117873 4.872060 3.117873 4.814816 3.452557 3.820847 ## [120] 4.904746 5.272516 3.356926 4.032499 3.378564 5.911533 3.378564 ## [127] 3.729311 3.729311 4.476843 4.671146 3.997759 4.175964 3.834037 ## [134] 4.208048 4.289671 4.538951 5.500860 6.174727 4.576296 4.576296 ## [141] 4.386580 4.676402 4.676402 5.505730 5.717127 3.330567 5.600427 ## [148] 3.330567 5.558363 3.289886 3.964228 4.289671 5.665630 4.289671 ## [155] 4.625072 4.625072 4.625072 3.831826 4.915886 3.831826 3.160117 ## [162] 3.160117 3.891037 6.510947 3.218108 3.218108 5.299333 3.040721 ## [169] 5.997035 3.461483 3.461483 3.461483 4.641885 5.148847 3.562368 ## [176] 3.562368 4.241228 5.201734 3.160117 3.160117 7.224972 5.590375 ## [183] 3.666620 7.326865 5.841041 3.516896 2.853008 7.268618 4.662449 ## [190] 3.582547 4.472554 5.159975 6.813544 4.472554 4.693411 4.472554 ## [197] 4.693411 2.523157 7.367436 4.845342 4.066279 6.991211 5.050805 ## [204] 3.374468 6.928669 4.906964 2.668812 3.449600 6.127561 3.449600 ## [211] 3.449600 3.284923 6.193245 3.959171 3.284923 3.284923 7.230064 ## [218] 4.989674 4.209353 3.989917 3.874733 4.103037 4.485477 2.994498 ## [225] 3.922071 4.900324 5.708535 3.782335 Get First Value sparse_matrix[2,1] ## [1] 4.968821 dense matrix dense_matrix &lt;- as.matrix(sparse_matrix) class(dense_matrix) ## [1] &quot;matrix&quot; str(dense_matrix) ## num [1:10, 1:80] 0 4.97 0 0 0 ... ## - attr(*, &quot;dimnames&quot;)=List of 2 ## ..$ : chr [1:10] &quot;MS4A1&quot; &quot;CD79B&quot; &quot;CD79A&quot; &quot;HLA-DRA&quot; ... ## ..$ : chr [1:80] &quot;ATGCCAGAACGACT&quot; &quot;CATGGCCTGTGCAT&quot; &quot;GAACCTGATGAACC&quot; &quot;TGACTGGATTCTCA&quot; ... Get First Value dense_matrix[2,1] ## [1] 4.968821 7.3.3.2 Functions create_function &lt;- function(x) { } 7.3.3.3 Reading Files ## read csv files read.csv(&quot;PATH/TO/FILENAME.csv&quot;) ## read tsv files read.delim(&quot;PATH/TO/FILENAME.tsv&quot;, sep = &#39;/t) 7.4 More information You can get more information about any R commands relevant to these datatypes using by typing ?function in an interactive session. 7.4.1 Checking for help for any function! start with a ? (this indicates you need the help menu) then the function name to get help on library(ggplot2) ?ggplot ## ggplot is a function, how do we use it? 7.5 Grammer of Graphics (ggplot2) 7.5.1 What is ggplot2? ggplot2 is an R package designed by Hadley Wickham which facilitates data plotting. In this lab, we will touch briefly on some of the features of the package. If you would like to learn more about how to use ggplot2, we would recommend reading “ggplot2 Elegant graphics for data analysis”, by Hadley Wickham or checking out his original paper on the package Data: Always start with the data, identify the dimensions you want to visualize. Aesthetics: Confirm the axes based on the data dimensions, positions of various data points in the plot. Also check if any form of encoding is needed including size, shape, color and so on which are useful for plotting multiple data dimensions. Scale: Do we need to scale the potential values, use a specific scale to represent multiple values or a range? Geometric objects: These are popularly known as ‘geoms’. This would cover the way we would depict the data points on the visualization. Should it be points, bars, lines and so on? Statistics: Do we need to show some statistical measures in the visualization like measures of central tendency, spread, confidence intervals? Facets: Do we need to create subplots based on specific data dimensions? Coordinate system: What kind of a coordinate system should the visualization be based on — should it be cartesian or polar? 7.5.2 Principles of ggplot2 Your data must be a dataframe if you want to plot it using ggplot2. Use the aes mapping function to specify how variables in the dataframe map to features on your plot Use geoms to specify how your data should be represented on your graph eg. as a scatterplot, a barplot, a boxplot etc. Data: Always start with the data, identify the dimensions you want to visualize. library(Seurat) library(ggplot2) gbm &lt;- pbmc_small@data gbm &lt;- as.data.frame(as.matrix(t(gbm))) new_plot &lt;- ggplot(gbm) Aesthetics: Confirm the axes based on the data dimensions, positions of various data points in the plot. Also check if any form of encoding is needed including size, shape, color and so on which are useful for plotting multiple data dimensions. 1D Plots new_plot_1dx &lt;- ggplot(gbm, aes(x = MS4A1)) new_plot_1dx Scale: Do we need to scale the potential values, use a specific scale to represent multiple values or a range? Geometric objects: These are popularly known as ‘geoms’. This would cover the way we would depict the data points on the visualization. Should it be points, bars, lines and so on? ## ggplot(gbm, aes(x = MS4A1)) + geom_histogram() ## or ## new_plot_1dx &lt;- new_plot_1dx + geom_histogram() ## reassign new_plot_1dx + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 7.5.2.1 Lab A Use different geom_ to make a different plots - try _bar() - try _density() new_plot_1dx Statistics: Do we need to show some statistical measures in the visualization like measures of central tendency, spread, confidence intervals? ggplot(gbm, aes(x = MS4A1)) + geom_histogram() + stat_bin(bins = 10) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 2D Plots new_plot_2d &lt;- ggplot(gbm, aes(MS4A1, CD79B)) ## scatter plot new_plot_2d + geom_point() 7.5.2.2 Lab B Use different geom_ to make a different plots - try _bar_abline() - try _bin2d() new_plot_2d Adding Statisitics in 2D plots Regression line (lm - linear model using OLS regression) ggplot(gbm, aes(MS4A1, CD79B)) + geom_point() + stat_smooth(method = &quot;lm&quot;) Adding Text Labels ## notice plus `+` at the end of each line, adding a new layer! ggplot(gbm, aes(MS4A1, CD79B)) + ## Data layer geom_point() + ## Geometry layer stat_smooth(method = &quot;lm&quot;) + ## geom_text(aes(label = rownames(gbm))) 7.5.2.3 Lab C Play arund with ggplot2. See what geoms to add and layers to include. ggplot(gbm, aes(x = MS4A1, y = CD79B)) 7.6 Reference R for Data Science Advanced R Bioconductor Workflows Bioconductor Presentation Original ggplot2 paper ggplot2 reference ggplot2 cheatsheet blog post "],
["expression-qc-and-normalization.html", "8 Expression QC and Normalization", " 8 Expression QC and Normalization "],
["data-wrangling-scrnaseq.html", "9 Data Wrangling scRNAseq", " 9 Data Wrangling scRNAseq "],
["identifying-cell-populations.html", "10 Identifying Cell Populations 10.1 Google Slides", " 10 Identifying Cell Populations 10.1 Google Slides "],
["feature-selection-and-cluster-analysis.html", "11 Feature Selection and Cluster Analysis 11.1 Abstract 11.2 Seurat Tutorial 11.3 Feature Selection", " 11 Feature Selection and Cluster Analysis 11.1 Abstract Many methods have been used to determine differential gene expression from single-cell RNA (scRNA)-seq data. We evaluated 36 approaches using experimental and synthetic data and found considerable differences in the number and characteristics of the genes that are called differentially expressed. Prefiltering of lowly expressed genes has important effects, particularly for some of the methods developed for bulk RNA-seq data analysis. However, we found that bulk RNA-seq analysis methods do not generally perform worse than those developed specifically for scRNA-seq. We also present conquer, a repository of consistently processed, analysis-ready public scRNA-seq data sets that is aimed at simplifying method evaluation and reanalysis of published results. Each data set provides abundance estimates for both genes and transcripts, as well as quality control and exploratory analysis reports. (Soneson and Robinson 2018) Cells are the basic building blocks of organisms and each cell is unique. Single-cell RNA sequencing has emerged as an indispensable tool to dissect the cellular heterogeneity and decompose tissues into cell types and/or cell states, which offers enormous potential for de novo discovery. Single-cell transcriptomic atlases provide unprecedented resolution to reveal complex cellular events and deepen our understanding of biological systems. In this review, we summarize and compare single-cell RNA sequencing technologies, that were developed since 2009, to facilitate a well-informed choice of method. The applications of these methods in different biological contexts are also discussed. We anticipate an ever-increasing role of single-cell RNA sequencing in biology with further improvement in providing spatial information and coupling to other cellular modalities. In the future, such biological findings will greatly benefit medical research. (Hedlund and Deng 2018) 11.2 Seurat Tutorial library(Seurat) pbmc &lt;- pbmc_small # The number of genes and UMIs (nGene and nUMI) are automatically calculated # for every object by Seurat. For non-UMI data, nUMI represents the sum of # the non-normalized values within a cell We calculate the percentage of # mitochondrial genes here and store it in percent.mito using AddMetaData. # We use object@raw.data since this represents non-transformed and # non-log-normalized counts The % of UMI mapping to MT-genes is a common # scRNA-seq QC metric. mito.genes &lt;- grep(pattern = &quot;^MT-&quot;, x = rownames(x = pbmc@data), value = TRUE) percent.mito &lt;- Matrix::colSums(pbmc@raw.data[mito.genes, ])/Matrix::colSums(pbmc@raw.data) # AddMetaData adds columns to object@meta.data, and is a great place to # stash QC stats pbmc &lt;- AddMetaData(object = pbmc, metadata = percent.mito, col.name = &quot;percent.mito&quot;) VlnPlot(object = pbmc, features.plot = c(&quot;nGene&quot;, &quot;nUMI&quot;, &quot;percent.mito&quot;), nCol = 3) # GenePlot is typically used to visualize gene-gene relationships, but can # be used for anything calculated by the object, i.e. columns in # object@meta.data, PC scores etc. Since there is a rare subset of cells # with an outlier level of high mitochondrial percentage and also low UMI # content, we filter these as well par(mfrow = c(1, 2)) GenePlot(object = pbmc, gene1 = &quot;nUMI&quot;, gene2 = &quot;percent.mito&quot;) GenePlot(object = pbmc, gene1 = &quot;nUMI&quot;, gene2 = &quot;nGene&quot;) # We filter out cells that have unique gene counts over 2,500 or less than # 200 Note that low.thresholds and high.thresholds are used to define a # &#39;gate&#39;. -Inf and Inf should be used if you don&#39;t want a lower or upper # threshold. pbmc &lt;- FilterCells(object = pbmc, subset.names = c(&quot;nGene&quot;, &quot;percent.mito&quot;), low.thresholds = c(200, -Inf), high.thresholds = c(2500, 0.05)) pbmc &lt;- NormalizeData(object = pbmc, normalization.method = &quot;LogNormalize&quot;, scale.factor = 10000) pbmc &lt;- FindVariableGenes(object = pbmc, mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 0.0125, x.high.cutoff = 3, y.cutoff = 0.5) pbmc &lt;- ScaleData(object = pbmc, vars.to.regress = c(&quot;nUMI&quot;, &quot;percent.mito&quot;)) pbmc &lt;- RunPCA(object = pbmc, pc.genes = pbmc@var.genes, do.print = TRUE, pcs.print = 1:5, genes.print = 5) # Examine and visualize PCA results a few different ways PrintPCA(object = pbmc, pcs.print = 1:5, genes.print = 5, use.full = FALSE) VizPCA(object = pbmc, pcs.use = 1:2) PCAPlot(object = pbmc, dim.1 = 1, dim.2 = 2) # ProjectPCA scores each gene in the dataset (including genes not included # in the PCA) based on their correlation with the calculated components. # Though we don&#39;t use this further here, it can be used to identify markers # that are strongly correlated with cellular heterogeneity, but may not have # passed through variable gene selection. The results of the projected PCA # can be explored by setting use.full=T in the functions above pbmc &lt;- ProjectPCA(object = pbmc, do.print = FALSE) PCHeatmap(object = pbmc, pc.use = 1, cells.use = 500, do.balanced = TRUE, label.columns = FALSE) PCHeatmap(object = pbmc, pc.use = 1:12, cells.use = 500, do.balanced = TRUE, label.columns = FALSE, use.full = FALSE) # NOTE: This process can take a long time for big datasets, comment out for # expediency. More approximate techniques such as those implemented in # PCElbowPlot() can be used to reduce computation time pbmc &lt;- JackStraw(object = pbmc, num.replicate = 100, display.progress = FALSE) JackStrawPlot(object = pbmc, PCs = 1:12) PCElbowPlot(object = pbmc) # save.SNN = T saves the SNN so that the clustering algorithm can be rerun # using the same graph but with a different resolution value (see docs for # full details) pbmc &lt;- FindClusters(object = pbmc, reduction.type = &quot;pca&quot;, dims.use = 1:10, resolution = 0.6, print.output = 0, save.SNN = TRUE) pbmc &lt;- RunTSNE(object = pbmc, dims.use = 1:10, do.fast = TRUE) # note that you can set do.label=T to help label individual clusters TSNEPlot(object = pbmc) # find all markers of cluster 1 cluster1.markers &lt;- FindMarkers(object = pbmc, ident.1 = 1, min.pct = 0.25) print(x = head(x = cluster1.markers, n = 5)) # find all markers distinguishing cluster 5 from clusters 0 and 3 cluster5.markers &lt;- FindMarkers(object = pbmc, ident.1 = 5, ident.2 = c(0, 3), min.pct = 0.25) print(x = head(x = cluster5.markers, n = 5)) # find all markers distinguishing cluster 5 from clusters 0 and 3 cluster5.markers &lt;- FindMarkers(object = pbmc, ident.1 = 5, ident.2 = c(0, 3), min.pct = 0.25) print(x = head(x = cluster5.markers, n = 5)) # find markers for every cluster compared to all remaining cells, report # only the positive ones pbmc.markers &lt;- FindAllMarkers(object = pbmc, only.pos = TRUE, min.pct = 0.25, thresh.use = 0.25) pbmc.markers %&gt;% group_by(cluster) %&gt;% top_n(2, avg_logFC) cluster1.markers &lt;- FindMarkers(object = pbmc, ident.1 = 0, thresh.use = 0.25, test.use = &quot;roc&quot;, only.pos = TRUE) VlnPlot(object = pbmc, features.plot = c(&quot;MS4A1&quot;, &quot;CD79A&quot;))s # you can plot raw UMI counts as well VlnPlot(object = pbmc, features.plot = c(&quot;NKG7&quot;, &quot;PF4&quot;), use.raw = TRUE, y.log = TRUE) FeaturePlot(object = pbmc, features.plot = c(&quot;MS4A1&quot;, &quot;GNLY&quot;, &quot;CD3E&quot;, &quot;CD14&quot;, &quot;FCER1A&quot;, &quot;FCGR3A&quot;, &quot;LYZ&quot;, &quot;PPBP&quot;, &quot;CD8A&quot;), cols.use = c(&quot;grey&quot;, &quot;blue&quot;), sreduction.use = &quot;tsne&quot;) top10 &lt;- pbmc.markers %&gt;% group_by(cluster) %&gt;% top_n(10, avg_logFC) # setting slim.col.label to TRUE will print just the cluster IDS instead of # every cell name DoHeatmap(object = pbmc, genes.use = top10$gene, slim.col.label = TRUE, remove.key = TRUE) current.cluster.ids &lt;- c(0, 1, 2, 3, 4, 5, 6, 7) new.cluster.ids &lt;- c(&quot;CD4 T cells&quot;, &quot;CD14+ Monocytes&quot;, &quot;B cells&quot;, &quot;CD8 T cells&quot;, &quot;FCGR3A+ Monocytes&quot;, &quot;NK cells&quot;, &quot;Dendritic cells&quot;, &quot;Megakaryocytes&quot;) pbmc@ident &lt;- plyr::mapvalues(x = pbmc@ident, from = current.cluster.ids, to = new.cluster.ids) TSNEPlot(object = pbmc, do.label = TRUE, pt.size = 0.5) 11.2.0.1 Further subdivisions within cell types If you perturb some of our parameter choices above (for example, setting resolution=0.8 or changing the number of PCs), you might see the CD4 T cells subdivide into two groups. You can explore this subdivision to find markers separating the two T cell subsets. However, before reclustering (which will overwrite object@ident), we can stash our renamed identities to be easily recovered later. # First lets stash our identities for later pbmc &lt;- StashIdent(object = pbmc, save.name = &quot;ClusterNames_0.6&quot;) # Note that if you set save.snn=T above, you don&#39;t need to recalculate the # SNN, and can simply put: pbmc &lt;- FindClusters(pbmc,resolution = 0.8) pbmc &lt;- FindClusters(object = pbmc, reduction.type = &quot;pca&quot;, dims.use = 1:10, resolution = 0.8, print.output = FALSE) ## Warning in BuildSNN(object = object, genes.use = genes.use, reduction.type ## = reduction.type, : Build parameters exactly match those of already ## computed and stored SNN. To force recalculation, set force.recalc to TRUE. # Demonstration of how to plot two tSNE plots side by side, and how to color # points based on different criteria plot1 &lt;- TSNEPlot(object = pbmc, do.return = TRUE, no.legend = TRUE, do.label = TRUE) plot2 &lt;- TSNEPlot(object = pbmc, do.return = TRUE, group.by = &quot;ClusterNames_0.6&quot;, no.legend = TRUE, do.label = TRUE) plot_grid(plot1, plot2) # Find discriminating markers tcell.markers &lt;- FindMarkers(object = pbmc, ident.1 = 0, ident.2 = 1) # Most of the markers tend to be expressed in C1 (i.e. S100A4). However, we # can see that CCR7 is upregulated in C0, strongly indicating that we can # differentiate memory from naive CD4 cells. cols.use demarcates the color # palette from low to high expression FeaturePlot(object = pbmc, features.plot = c(&quot;S100A4&quot;, &quot;CCR7&quot;), cols.use = c(&quot;green&quot;, &quot;blue&quot;)) 11.3 Feature Selection 11.3.1 Differential Expression / Variable Genes 11.3.1.1 Variable Genes pbmc &lt;- FindVariableGenes(object = pbmc, mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 0.0125, x.high.cutoff = 3, y.cutoff = 0.5) VariableGenePlot(object, do.text = TRUE, cex.use = 0.5, cex.text.use = 0.5, do.spike = FALSE, pch.use = 16, col.use = &quot;black&quot;, spike.col.use = &quot;red&quot;, plot.both = FALSE, do.contour = TRUE, contour.lwd = 3, contour.col = &quot;white&quot;, contour.lty = 2, x.low.cutoff = 0.1, x.high.cutoff = 8, y.cutoff = 1, y.high.cutoff = Inf) 11.3.1.2 Differential Expression One of the most commonly performed tasks for RNA-seq data is differential gene expression (DE) analysis. Although well- established tools exist for such analysis in bulk RNA-seq data6–8, methods for scRNA-seq data are just emerging. Given the special characteristics of scRNA-seq data, including generally low library sizes, high noise levels and a large fraction of so-called ‘dropout’ events, it is unclear whether DE methods that have been devel- oped for bulk RNA-seq are suitable also for scRNA-seq ## Differential expression using DESeq2 DESeq2DETest(object, cells.1, cells.2, genes.use = NULL, assay.type = &quot;RNA&quot;, ...) ## Likelihood ratio test for zero-inflated data DiffExpTest(object, cells.1, cells.2, assay.type = &quot;RNA&quot;, genes.use = NULL, print.bar = TRUE) ## t-test DiffTTest(object, cells.1, cells.2, genes.use = NULL, print.bar = TRUE, assay.type = &quot;RNA&quot;) 11.3.2 Dimensionality Reduction 11.3.2.1 Principal Components Analysis (PCA) RunPCA() 11.3.3 Independent Components Analysis (ICA) RunICA() 11.3.3.1 Multidimensional Scaling (MDS) 11.3.4 Clustering 11.3.4.1 Kmeans DoKMeans(object, genes.use = NULL, k.genes = NULL, k.cells = 0, k.seed = 1, do.plot = FALSE, data.cut = 2.5, k.cols = PurpleAndYellow(), set.ident = TRUE, do.constrained = FALSE, assay.type = &quot;RNA&quot;, ...) 11.3.4.2 Louvain ## Neighborhood graph BuildSNN(object, genes.use = NULL, reduction.type = &quot;pca&quot;, dims.use = NULL, k.param = 10, plot.SNN = FALSE, prune.SNN = 1/15, print.output = TRUE, distance.matrix = NULL, force.recalc = FALSE, filename = NULL, save.SNN = TRUE, nn.eps = 0) FindClusters(object, genes.use = NULL, reduction.type = &quot;pca&quot;, dims.use = NULL, k.param = 30, plot.SNN = FALSE, prune.SNN = 1/15, print.output = TRUE, distance.matrix = NULL, save.SNN = FALSE, reuse.SNN = FALSE, force.recalc = FALSE, nn.eps = 0, modularity.fxn = 1, resolution = 0.8, algorithm = 1, n.start = 100, n.iter = 10, random.seed = 0, temp.file.location = NULL, edge.file.name = NULL) 11.3.4.3 Probabilistic (LDA) library(CountClust) library(singleCellRNASeqMouseDeng2014) deng.counts &lt;- exprs(Deng2014MouseESC) deng.meta_data &lt;- pData(Deng2014MouseESC) deng.gene_names &lt;- rownames(deng.counts) FitGoM(t(deng.counts),K=3,path_rda=&quot;data/MouseDeng2014.FitGoM.rda&quot;) 11.3.5 Check Clusters Use Classifier to predict cell cluster. See how it predicts using hold out data. ClassifyCells(object, classifier, training.genes = NULL, training.classes = NULL, new.data = NULL, ...) Visually check by comparing centroids of clusters in gene space and embedding space. GetCentroids(object, cells.use = NULL, get.exact = TRUE) 11.3.6 Visualizing/Embedding 11.3.6.1 tSNE 11.3.6.2 UMAP References "],
["batch-effects.html", "12 Batch Effects", " 12 Batch Effects "],
["correcting-batch-effects.html", "13 Correcting Batch Effects", " 13 Correcting Batch Effects "],
["functional-analysis.html", "14 Functional Analysis 14.1 Google Slides 14.2 Gene sets and signatures 14.3 Pathway analysis 14.4 inferCNV / honeybadger", " 14 Functional Analysis 14.1 Google Slides 14.2 Gene sets and signatures 14.2.1 Cell Cycle marrow &lt;- CellCycleScoring(object = marrow, s.genes = s.genes, g2m.genes = g2m.genes, set.ident = TRUE) # view cell cycle scores and phase assignments head(x = marrow@meta.data) # Visualize the distribution of cell cycle markers across RidgePlot(object = marrow, features.plot = c(&quot;PCNA&quot;, &quot;TOP2A&quot;, &quot;MCM6&quot;, &quot;MKI67&quot;), nCol = 2) # Running a PCA on cell cycle genes reveals, unsurprisingly, that cells # separate entirely by phase marrow &lt;- RunPCA(object = marrow, pc.genes = c(s.genes, g2m.genes), do.print = FALSE) PCAPlot(object = marrow) 14.3 Pathway analysis 14.4 inferCNV / honeybadger Github Page 14.4.1 Create the InferCNV Object Reading in the raw counts matrix and meta data, populating the infercnv object infercnv_obj = CreateInfercnvObject( raw_counts_matrix=&quot;../example/oligodendroglioma_expression_downsampled.counts.matrix&quot;, annotations_file=&quot;../example/oligodendroglioma_annotations_downsampled.txt&quot;, delim=&quot;\\t&quot;, gene_order_file=&quot;../example/gencode_downsampled.txt&quot;, ref_group_names=c(&quot;Microglia/Macrophage&quot;,&quot;Oligodendrocytes (non-malignant)&quot;)) 14.4.2 Filtering genes Removing those genes that are very lowly expressed or present in very few cells # filter out low expressed genes cutoff=1 infercnv_obj &lt;- require_above_min_mean_expr_cutoff(infercnv_obj, cutoff) # filter out bad cells min_cells_per_gene=3 infercnv_obj &lt;- require_above_min_cells_ref(infercnv_obj, min_cells_per_gene=min_cells_per_gene) ## for safe keeping infercnv_orig_filtered = infercnv_obj #plot_mean_chr_expr_lineplot(infercnv_obj) save(&#39;infercnv_obj&#39;, file = &#39;../example_output/infercnv_obj.orig_filtered&#39;) 14.4.3 Normalize each cell’s counts for sequencing depth infercnv_obj &lt;- infercnv:::normalize_counts_by_seq_depth(infercnv_obj) 14.4.4 Perform Anscombe normalization Suggested by Matan for removing noisy variation at low counts infercnv_obj &lt;- infercnv:::anscombe_transform(infercnv_obj) 14.4.5 Log transform the normalized counts: infercnv_obj &lt;- log2xplus1(infercnv_obj) 14.4.6 Apply maximum bounds to the expression data to reduce outlier effects threshold = mean(abs(get_average_bounds(infercnv_obj))) infercnv_obj &lt;- apply_max_threshold_bounds(infercnv_obj, threshold=threshold) 14.4.7 Initial view, before inferCNV operations: plot_cnv(infercnv_obj, out_dir=&#39;../example_output/&#39;, output_filename=&#39;infercnv.logtransf&#39;, x.range=&quot;auto&quot;, title = &quot;Before InferCNV (filtered &amp; log2 transformed)&quot;, color_safe_pal = FALSE, x.center = mean(infercnv_obj@expr.data)) 14.4.8 Perform smoothing across chromosomes infercnv_obj = smooth_by_chromosome(infercnv_obj, window_length=101, smooth_ends=TRUE) # re-center each cell infercnv_obj &lt;- center_cell_expr_across_chromosome(infercnv_obj, method = &quot;median&quot;) plot_cnv(infercnv_obj, out_dir=&#39;../example_output/&#39;, output_filename=&#39;infercnv.chr_smoothed&#39;, x.range=&quot;auto&quot;, title = &quot;chr smoothed and cells re-centered&quot;, color_safe_pal = FALSE) 14.4.9 Subtract the reference values from observations, now have log(fold change) values infercnv_obj &lt;- subtract_ref_expr_from_obs(infercnv_obj, inv_log=TRUE) plot_cnv(infercnv_obj, out_dir=&#39;../example_output/&#39;, output_filename=&#39;infercnv.ref_subtracted&#39;, x.range=&quot;auto&quot;, title=&quot;ref subtracted&quot;, color_safe_pal = FALSE) 14.4.10 Invert log values Converting the log(FC) values to regular fold change values, centered at 1 (no fold change) This is important because we want (1/2)x to be symmetrical to 1.5x, representing loss/gain of one chromosome region. infercnv_obj &lt;- invert_log2(infercnv_obj) plot_cnv(infercnv_obj, out_dir=&#39;../example_output/&#39;, output_filename=&#39;infercnv.inverted&#39;, color_safe_pal = FALSE, x.range=&quot;auto&quot;, x.center=1, title = &quot;inverted log FC to FC&quot;) 14.4.11 Removing noise infercnv_obj &lt;- clear_noise_via_ref_mean_sd(infercnv_obj, sd_amplifier = 1.5) plot_cnv(infercnv_obj, out_dir=&#39;../example_output/&#39;, output_filename=&#39;infercnv.denoised&#39;, x.range=&quot;auto&quot;, x.center=1, title=&quot;denoised&quot;, color_safe_pal = FALSE) 14.4.12 Remove outlier data points This generally improves on the visualization infercnv_obj = remove_outliers_norm(infercnv_obj) plot_cnv(infercnv_obj, out_dir=&#39;../example_output/&#39;, output_filename=&#39;infercnv.outliers_removed&#39;, color_safe_pal = FALSE, x.range=&quot;auto&quot;, x.center=1, title = &quot;outliers removed&quot;) 14.4.13 Find DE genes by comparing the mutant types to normal types, BASIC Runs a t-Test comparing tumor/normal for each patient and normal sample, and masks out those genes that are not significantly DE. plot_data = infercnv_obj@expr.data high_threshold = max(abs(quantile(plot_data[plot_data != 0], c(0.05, 0.95)))) low_threshold = -1 * high_threshold infercnv_obj2 &lt;- infercnv:::mask_non_DE_genes_basic(infercnv_obj, test.use = &#39;t&#39;, center_val=1) plot_cnv(infercnv_obj2, out_dir=&#39;../example_output/&#39;, output_filename=&#39;infercnv.non-DE-genes-masked&#39;, color_safe_pal = FALSE, x.range=c(low_threshold, high_threshold), x.center=1, title = &quot;non-DE-genes-masked&quot;) 14.4.14 Additional Information 14.4.14.1 Online Documentation For additional explanations on files, usage, and a tutorial please visit the wiki. 14.4.14.2 TrinityCTAT This tool is a part of the TrinityCTAT toolkit focused on leveraging the use of RNA-Seq to better understand cancer transcriptomes. To find out more please visit TrinityCTAT 14.4.14.3 Applications This methodology was used in: Anoop P. Patel et al. Single-cell RNA-seq highlights intratumoral heterogeneity in primary glioblastoma. Science. 2014 Jun 20: 1396-1401 Tirosh I et al.Dissecting the multicellular ecosystem of metastatic melanoma by single-cell RNA-seq. Science. 2016 Apr 8;352(6282):189-96 "],
["pseudotime-cell-trajectories.html", "15 Pseudotime Cell Trajectories 15.1 Google Slides 15.2 Comparison Abstract 15.3 What is Pseudotime 15.4 Inferring Pseudotime", " 15 Pseudotime Cell Trajectories Comparison: Cell Trajectories Slingshot Paper Diffusion pseudotime Diffusion maps for high-dimensional single-cell analysis 15.1 Google Slides 15.2 Comparison Abstract Using single-cell -omics data, it is now possible to computationally order cells along trajectories, allowing the unbiased study of cellular dynamic processes. Since 2014, more than 50 trajectory inference methods have been developed, each with its own set of methodological characteristics. As a result, choosing a method to infer trajectories is often challenging, since a comprehensive assessment of the performance and robustness of each method is still lacking. In order to facilitate the comparison of the results of these methods to each other and to a gold standard, we developed a global framework to benchmark trajectory inference tools. Using this framework, we compared the trajectories from a total of 29 trajectory inference methods, on a large collection of real and synthetic datasets. We evaluate methods using several metrics, including accuracy of the inferred ordering, correctness of the network topology, code quality and user friendliness. We found that some methods, including Slingshot (Street et al. 2018), TSCAN (Z. Ji and Ji 2016) and Monocle DDRTree (Trapnell et al. 2014), clearly outperform other methods, although their performance depended on the type of trajectory present in the data. Based on our benchmarking results, we therefore developed a set of guidelines for method users. However, our analysis also indicated that there is still a lot of room for improvement, especially for methods detecting complex trajectory topologies. Our evaluation pipeline can therefore be used to spearhead the development of new scalable and more accurate methods, and is available at github.com/dynverse/dynverse. (Saelens et al. 2018) 15.3 What is Pseudotime Trajectory inference methods. 15.4 Inferring Pseudotime Tree, Graph, Linear, Bifurcation, Multfurcation, Cycle 15.4.1 Diffusion Maps 15.4.2 Tree Methods 15.4.3 Model Based Methods knitr::include_graphics(&quot;images/PseudotimeComparisonGuidelines.png&quot;) References "],
["spatial-genomics.html", "16 Spatial Genomics", " 16 Spatial Genomics ? Maybe going away ? "],
["functional-pseudotime-analysis.html", "17 Functional Pseudotime Analysis", " 17 Functional Pseudotime Analysis "],
["single-cell-multiomic-technologies.html", "18 Single Cell Multiomic Technologies", " 18 Single Cell Multiomic Technologies "],
["cite-seq-and-scatac-seq.html", "19 CITE-seq and scATAC-seq", " 19 CITE-seq and scATAC-seq "],
["single-cell-resources.html", "20 Single Cell Resources 20.1 Comprehensive list of single-cell resources 20.2 Computational packages for single-cell analysis 20.3 eLife Commentary on the Human Cell Atlas 20.4 Online courses", " 20 Single Cell Resources 20.1 Comprehensive list of single-cell resources https://github.com/seandavi/awesome-single-cell 20.2 Computational packages for single-cell analysis http://bioconductor.org/packages/devel/workflows/html/simpleSingleCell.html https://satijalab.org/seurat/ https://scanpy.readthedocs.io/ 20.3 eLife Commentary on the Human Cell Atlas link - Nature Commentary on the Human Cell Atlas - https://www.nature.com/news/the-human-cell-atlas-from-vision-to-reality-1.22854 20.4 Online courses https://hemberg-lab.github.io/scRNA.seq.course/ https://github.com/SingleCellTranscriptomics "],
["references.html", "References", " References "]
]

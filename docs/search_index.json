[
["index.html", "ANALYSIS OF SINGLE CELL RNA-SEQ DATA 1 Introduction 1.1 COURSE OVERVIEW 1.2 TARGETED AUDIENCE &amp; ASSUMED BACKGROUND 1.3 COURSE FORMAT 1.4 Getting Started 1.5 SESSION CONTENT", " ANALYSIS OF SINGLE CELL RNA-SEQ DATA Orr Ashenberg Dana Silverbush Kirk Gosik 2019-02-21 1 Introduction 1.1 COURSE OVERVIEW In recent years single cell RNA-seq (scRNA-seq) has become widely used for transcriptome analysis in many areas of biology. In contrast to bulk RNA-seq, scRNA-seq provides quantitative measurements of the expression of every gene in a single cell. However, to analyze scRNA-seq data, novel methods are required and some of the underlying assumptions for the methods developed for bulk RNA-seq experiments are no longer valid. In this course we will cover all steps of the scRNA-seq processing, starting from the raw reads coming off the sequencer. The course includes common analysis strategies, using state-of-the-art methods and we also discuss the central biological questions that can be addressed using scRNA-seq. 1.2 TARGETED AUDIENCE &amp; ASSUMED BACKGROUND This course is aimed at researchers and technical workers who are or will be analyzing scRNA-seq data. The material is suitable both for experimentalists who want to learn more about data-analysis as well as computational biologists who want to learn about scRNASeq methods. Examples demonstrated in this course can be applied to any experimental protocol or biological system. The requirements for this course are: 1. Working knowledge of unix (managing files, running programs) 2. Programming experience in R (writing a function, basic I/O operations, variable types, using packages). Bioconductor experience is a plus. 3. Familiarity with next-generation sequencing data and its analyses (using alignment and quantification tools for bulk sequencing data) 1.3 COURSE FORMAT The course will be delivered over the course of five days. Each day will include a lecture and laboratory component. The lecture will introduce the topics of discussion and the laboratory sessions will be focused on practical hands-on analysis of scRNA-seq data. These sessions will involve a combination of both mirroring exercises with the instructor to demonstrate a skill as well as applying these skills on your own to complete individual exercises. After and during each exercise, interpretation of results will be discussed as a group. Computing will be done using a combination of tools installed on the attendees laptop computer and web resources accessed via web browser. 1.4 Getting Started 1.5 SESSION CONTENT 1.5.1 Monday – Classes from 09:30 to 17:30 (lunch break-1 hr, 40 min of total coffee breaks) 1.5.1.1 Lecture 1 – scRNA-Seq experimental design (1 hour, Orr) Overview of course (intros, 20 min) General introduction: HCA/KCO overview Comparison of Bulk and single cell RNA-Seq Overview of available scRNA-seq technologies (10x) and experimental protocols scRNA-Seq experimental design and analysis workflow? 1.5.1.2 Lab 1 – Understanding sequencing raw data (Kirk, 1.5-2 hours) Lab based around data wrangling from public data repositories: get data from 10x website, single cell portal, from GEO (fastqs, counts) Shell and Unix commands to navigate directories, create folders, open files Raw file formats 1.5.1.3 Lecture 2 - Intro to Data processing: from bcl file to bam file (1 hour, Dana) scRNA-Seq processing workflow starting with choice of sequencer (NextSeq, HiSeq, MiSeq) / barcode swapping and bcl files Overview of Popular tools and algorithms Common single-cell analyses and interpretation Sequencing data: alignment and quality control Looking at cool things in alignment like where reads are, mutations, splicing 1.5.1.4 Lab 2 – Processing raw scRNA-Seq data (Dana, no R at this point) Data outputs from different scRNAseq technologies (10x, Smart-seq2) - process both? Demultiplexing sequencing data Read Quality Control (CellRanger, dropEst, fastqc) Run bowtie2 on 2 wells to demonstrate alignment Read alignment and visualization (kallisto, RSEM, Igviewer) http://hemberg-lab.github.io/scRNA.seq.course/processing-raw-scrna-seq-data.html Chapters 3 and 4? Are there parts that supposed to be in labs 1 or 3? Demultiplexing FastQC Align (STAR/TOPHAT/Kallisto) IGViewer - what do we want here? I use it for mutation detections, copying sequences, searching for alternative splicing. Flash talks (1.5 hr, break into 2 groups of 13) small presentation about your genome assembly and annotation project, ideally do 3 slides -2/3 mins (powerpoint or similar). So you can introduce yourselves and we can get to know each other. 1.5.2 Tuesday – Classes from 09:30 to 17:30 1.5.2.1 Lecture 3 – Transcriptome quantification: from bam file to counts (Orr) Read &amp; UMI counting (Kallisto alignment-free pseudocounts as well), how RSEM works (length dependence, sequencing depth, multimapping reads), CellRanger (dropest), bustools 10x barcode structure and links to Perturb-seq Gene length &amp; coverage Gene expression units (count data Smart-seq2 counts or 10x UMIs vs expression data) Some R overview slides, https://r4ds.had.co.nz/ 1.5.2.2 Lab 3 - Introduction to R (Kirk) Installing packages Data-types Data manipulation, slicing Strings manipulations Introducing object oriented programming / S4 objects Visualization tools Bonus create FeaturePlot from Seurat in base ggplot Bonus: run RSEM on Dana’s bam files if you are bored 1.5.2.3 Lecture 4 - Expression QC, normalisation and batch correction (Dana) What CellRanger does for quality filtering PBMC data normalisation methods https://www.nature.com/articles/nmeth.4292 Doublets, empty droplets Barcode swapping Regression with technical covariates What about imputation? 1.5.2.4 Lab 4 – Data wrangling for scRNAseq data (Dana) Data structures and file formats for single-cell data Quality control of cells and genes (doublets, ambient, empty drops) Data exploration: violin plots… Introducing Seurat object Genes House keeping genes Mitochondrial genes (never used these ones) Filter - Do we remove both cells and genes here? Normalize (introduce more options, other than log transform?) Find variable genes (Is it a first reduction? Why the binning?) Scaling Regression Heatmap of desired genes? Sigantures? http://hemberg-lab.github.io/scRNA.seq.course/introduction-to-rbioconductor.html 9.1 - 9.5? Bonus - imputation (magic? One of the two Gocken recommended?) Flash talks (1.5 hr, break into 2 groups of 13) small presentation about your genome assembly and annotation project, ideally do 3 slides -2/3 mins (powerpoint or similar). So you can introduce yourselves and we can get to know each other. 1.5.3 Wednesday – Classes from 09:30 to 17:30 1.5.3.1 Lecture 5 - Identifying cell populations (Kirk) Feature selection Dimensionality reduction Clustering and assigning identity (Louvain, NMF, topic models, variational autoencoder) Differential expression tests 1.5.3.2 Lab 5 – Feature selection &amp; Clustering analysis (Kirk) Parameters and clustering Comparison of feature selection methods 1.5.3.3 Lecture 6 - Introduction to batch effects (Orr) Batch correction methods (regress out batch, scaling within batch, CCA, MNN, Liger, scvi, scgen) Evaluation methods for batch correction (ARI, average silhouette width, kBET…) 1.5.3.4 Lab 6 - Correcting batch effects (Orr) Comparison of batch correction methods, Seurat pancreas Poster session with beer &amp; wine (time?) poster of current or proposed single cell genomic study. Print out would be good (recent posters are fine), or if you haven’t got a recent one, just a quick one pulled together on powerpoint and printed out on A4 is okay too - you shouldn’t stress too much about this, it’s just to connect the flash talks to the posters and it will be absolutely informal (unlike a poster session at a conference!). Take notes on how to do single-cell analysis, ideas, challenges, things you find interesting, directions you would like to explore. 1.5.4 Thursday – Classes from 09:30 to 17:30 Post poster session discussion groups 30 min discussion wrapping up poster session, and keeping track of ideas in a shared Google doc 1.5.4.1 Lecture 7 - Advanced topics: Functional analysis of cell sub-populations (Kirk 30 min) Gene sets and signatures Pathway analysis inferCNV / honeybadger 1.5.4.2 Lecture 7 - Advanced topics: Pseudotime cell trajectories (Kirk 30 min) Waddington Landscape Pseudotime inference Differential expression through pseudotime Lecture 7 - Advanced topics: Spatial genomics, multiplexing? (Kirk 30 min) 1.5.4.3 Lab 8 - Functional and Pseudotime analysis (Orr) Popular tools and packages for functional analysis (https://github.com/dynverse/dynmethods#list-of-included-methods) Review concepts from papers Comparison of pseudotime methods https://github.com/velocyto-team/velocyto.R 1.5.4.4 Lecture 8 - Single-cell multiomic technologies (Dana) Introduction to other omic data types Integrating scRNA-seq with other single-cell modalities (CITE, Perturb, ATAC, methylation…) 1.5.4.5 Lab 9 - Analysis of CITE-seq, scATAC-seq (Orr, may be time-limited) https://github.com/Hoohm/CITE-seq-Count https://cite-seq.com/eccite-seq/ https://support.10xgenomics.com/single-cell-vdj/index/doc/technical-note-assay-scheme-and-configuration-of-chromium-single-cell-vdj-libraries https://satijalab.org/seurat/multimodal_vignette.html https://www.bioconductor.org/packages/devel/bioc/vignettes/cicero/inst/doc/website.html 1.5.5 Friday – Classes from 09:30 to 17:30 1.5.5.1 Lab 10 - small dataset for analysis (Dana) Karthik has a good starting point: Krumlov_lab2_guidelines.html and Hemberg lab http://hemberg-lab.github.io/scRNA.seq.course/advanced-exercises.html Present a set of methods and orders in which to try them IDH mutated glioma Goal for first half: get to clustering and identify malignant cells (inferCNV possible) Goal for second half: cell states For our other courses, the last day we usually divide them in groups of 3-4 ppl and assign them a small dataset in order to repeat all the analyses they have learnt during the week, to think about the best strategy to carry out the analyses and to present the results in front of the other ppl. I believe this is something very productive and helpful because it is a kind of wrap-up and brainstorming session. Normally, ppl love to talk and present something and in this way they/we can be 100% sure they really understood the different steps of the pipeline. Lecture 9 - Group presentations Review, Questions and Answers "],
["scrna-seq-experimental-design.html", "2 scRNA-Seq Experimental Design", " 2 scRNA-Seq Experimental Design "],
["understanding-sequencing-raw-data.html", "3 Understanding Sequencing Raw Data 3.1 Common Linux Commands 3.2 Raw file formats 3.3 GEO 3.4 Single Cell Portal", " 3 Understanding Sequencing Raw Data Lab based around data wrangling from public data repositories: get data from 10x website, single cell portal, from GEO (fastqs, counts) 3.1 Common Linux Commands ls . cd cat grep more mkdir 3.2 Raw file formats 3.3 GEO 3.4 Single Cell Portal "],
["data-preprocessing.html", "4 Data Preprocessing", " 4 Data Preprocessing "],
["processing-scrna-seq-data.html", "5 Processing scRNA-Seq data", " 5 Processing scRNA-Seq data "],
["transcriptome-quantification.html", "6 Transcriptome Quantification", " 6 Transcriptome Quantification "],
["introduction-rbioconductor.html", "7 Introduction R/Bioconductor 7.1 Installing packages 7.2 Installation instructions: 7.3 Data-types/classes 7.4 Basic data structures 7.5 More information", " 7 Introduction R/Bioconductor Presentation 7.1 Installing packages 7.1.1 CRAN The Comprehensive R Archive Network CRAN is the biggest archive of R packages. There are few requirements for uploading packages besides building and installing succesfully, hence documentation and support is often minimal and figuring how to use these packages can be a challenge it itself. CRAN is the default repository R will search to find packages to install: install.packages(&quot;devtools&quot;) require(&quot;devtools&quot;) 7.1.2 Github Github isn’t specific to R, any code of any type in any state can be uploaded. There is no guarantee a package uploaded to github will even install, nevermind do what it claims to do. R packages can be downloaded and installed directly from github using the “devtools” package installed above. devtools::install_github(&quot;tallulandrews/M3Drop&quot;) Github is also a version control system which stores multiple versions of any package. By default the most recent “master” version of the package is installed. If you want an older version or the development branch this can be specified using the “ref” parameter: # different branch devtools::install_github(&quot;tallulandrews/M3D&quot;, ref=&quot;nbumi&quot;) # previous commit devtools::install_github(&quot;tallulandrews/M3Drop&quot;, ref=&quot;434d2da28254acc8de4940c1dc3907ac72973135&quot;) Note: make sure you re-install the M3Drop master branch for later in the course. 7.1.3 Bioconductor Bioconductor is a repository of R-packages specifically for biological analyses. It has the strictest requirements for submission, including installation on every platform and full documentation with a tutorial (called a vignette) explaining how the package should be used. Bioconductor also encourages utilization of standard data structures/classes and coding style/naming conventions, so that, in theory, packages and analyses can be combined into large pipelines or workflows. source(&quot;https://bioconductor.org/biocLite.R&quot;) biocLite(&quot;edgeR&quot;) Note: in some situations it is necessary to substitute “http://” for “https://” in the above depending on the security features of your internet connection/network. Bioconductor also requires creators to support their packages and has a regular 6-month release schedule. Make sure you are using the most recent release of bioconductor before trying to install packages for the course. source(&quot;https://bioconductor.org/biocLite.R&quot;) biocLite(&quot;BiocUpgrade&quot;) 7.1.4 Source The final way to install packages is directly from source. In this case you have to download a fully built source code file, usually packagename.tar.gz, or clone the github repository and rebuild the package yourself. Generally this will only be done if you want to edit a package yourself, or if for some reason the former methods have failed. install.packages(&quot;M3Drop_3.05.00.tar.gz&quot;, type=&quot;source&quot;) 7.2 Installation instructions: All the packages necessary for this course are available here. Starting from “RUN Rscript -e”install.packages(‘devtools’)&quot; “, run each of the commands (minus”RUN“) on the command line or start an R session and run each of the commands within the quotation marks. Note the ordering of the installation is important in some cases, so make sure you run them in order from top to bottom. 7.3 Data-types/classes R is a high level language so the underlying data-type is generally not important. The exception if you are accessing R data directly using another language such as C, but that is beyond the scope of this course. Instead we will consider the basic data classes: numeric, integer, logical, and character, and the higher level data class called “factor”. You can check what class your data is using the “class()” function. Aside: R can also store data as “complex” for complex numbers but generally this isn’t relevant for biological analyses. 7.3.1 Numeric The “numeric” class is the default class for storing any numeric data - integers, decimal numbers, numbers in scientific notation, etc… x = 1.141 class(x) ## [1] &quot;numeric&quot; y = 42 class(y) ## [1] &quot;numeric&quot; z = 6.02e23 class(z) ## [1] &quot;numeric&quot; Here we see that even though R has an “integer” class and 42 could be stored more efficiently as an integer the default is to store it as “numeric”. If we want 42 to be stored as an integer we must “coerce” it to that class: y = as.integer(42) class(y) ## [1] &quot;integer&quot; Coercion will force R to store data as a particular class, if our data is incompatible with that class it will still do it but the data will be converted to NAs: as.numeric(&quot;H&quot;) ## Warning: NAs introduced by coercion ## [1] NA Above we tried to coerce “character” data, identified by the double quotation marks, into numeric data which doesn’t make sense, so we triggered (“threw”) an warning message. Since this is only a warning R would continue with any subsequent commands in a script/function, whereas an “error” would cause R to halt. 7.3.2 Character/String The “character” class stores all kinds of text data. Programing convention calls data containing multiple letters a “string”, thus most R functions which act on character data will refer to the data as “strings” and will often have “str” or “string” in it’s name. Strings are identified by being flanked by double quotation marks, whereas variable/function names are not: x = 5 a = &quot;x&quot; # character &quot;x&quot; a ## [1] &quot;x&quot; b = x # variable x b ## [1] 5 In addition to standard alphanumeric characters, strings can also store various special characters. Special characters are identified using a backlash followed by a single character, the most relevant are the special character for tab : \\t and new line : \\n. To demonstrate the these special characters lets concatenate (cat) together two strings with these characters separating (sep) them: cat(&quot;Hello&quot;, &quot;World&quot;, sep= &quot; &quot;) ## Hello World cat(&quot;Hello&quot;, &quot;World&quot;, sep= &quot;\\t&quot;) ## Hello World cat(&quot;Hello&quot;, &quot;World&quot;, sep= &quot;\\n&quot;) ## Hello ## World Note that special characters work differently in different functions. For instance the paste function does the same thing as cat but does not recognize special characters. paste(&quot;Hello&quot;, &quot;World&quot;, sep= &quot; &quot;) ## [1] &quot;Hello World&quot; paste(&quot;Hello&quot;, &quot;World&quot;, sep= &quot;\\t&quot;) ## [1] &quot;Hello\\tWorld&quot; paste(&quot;Hello&quot;, &quot;World&quot;, sep= &quot;\\n&quot;) ## [1] &quot;Hello\\nWorld&quot; Single or double backslash is also used as an escape character to turn off special characters or allow quotation marks to be included in strings: cat(&quot;This \\&quot;string\\&quot; contains quotation marks.&quot;) ## This &quot;string&quot; contains quotation marks. Special characters are generally only used in pattern matching, and reading/writing data to files. For instance this is how you would read a tab-separated file into R. dat = read.delim(&quot;file.tsv&quot;, sep=&quot;\\t&quot;) Another special type of character data are colours. Colours can be specified in three main ways: by name from those available, by red, green, blue values using the rgb function, and by hue (colour), saturation (colour vs white) and value (colour/white vs black) using the hsv function. By default rgb and hsv expect three values in 0-1 with an optional fourth value for transparency. Alternatively, sets of predetermined colours with useful properties can be loaded from many different packages with RColorBrewer being one of the most popular. reds = c(&quot;red&quot;, rgb(1,0,0), hsv(0, 1, 1)) reds ## [1] &quot;red&quot; &quot;#FF0000&quot; &quot;#FF0000&quot; barplot(c(1,1,1), col=reds, names=c(&quot;by_name&quot;, &quot;by_rgb&quot;, &quot;by_hsv&quot;)) 7.3.3 Logical The logical class stores boolean truth values, i.e. TRUE and FALSE. It is used for storing the results of logical operations and conditional statements will be coerced to this class. Most other data-types can be coerced to boolean without triggering (or “throwing”) error messages, which may cause unexpected behaviour. x = TRUE class(x) ## [1] &quot;logical&quot; y = &quot;T&quot; as.logical(y) ## [1] TRUE z = 5 as.logical(z) ## [1] TRUE x = FALSE class(x) ## [1] &quot;logical&quot; y = &quot;F&quot; as.logical(y) ## [1] FALSE z = 0 as.logical(z) ## [1] FALSE Exercise 1 Experiment with other character and numeric values, which are coerced to TRUE or FALSE? which are coerced to neither? Do you ever throw a warning/error message? 7.3.4 Factors String/Character data is very memory inefficient to store, each letter generally requires the same amount of memory as any integer. Thus when storing a vector of strings with repeated elements it is more efficient assign each element to an integer and store the vector as integers and an additional string-to-integer association table. Thus, by default R will read in text columns of a data table as factors. str_vector = c(&quot;Apple&quot;, &quot;Apple&quot;, &quot;Banana&quot;, &quot;Banana&quot;, &quot;Banana&quot;, &quot;Carrot&quot;, &quot;Carrot&quot;, &quot;Apple&quot;, &quot;Banana&quot;) factored_vector = factor(str_vector) factored_vector ## [1] Apple Apple Banana Banana Banana Carrot Carrot Apple Banana ## Levels: Apple Banana Carrot as.numeric(factored_vector) ## [1] 1 1 2 2 2 3 3 1 2 The double nature of factors can cause some unintuitive behaviour. E.g. joining two factors together will convert them to the numeric form and the original strings will be lost. c(factored_vector, factored_vector) ## [1] 1 1 2 2 2 3 3 1 2 1 1 2 2 2 3 3 1 2 Likewise if due to formatting issues numeric data is mistakenly interpretted as strings, then you must convert the factor back to strings before coercing to numeric values: x = c(&quot;20&quot;, &quot;25&quot;, &quot;23&quot;, &quot;38&quot;, &quot;20&quot;, &quot;40&quot;, &quot;25&quot;, &quot;30&quot;) x = factor(x) as.numeric(x) ## [1] 1 3 2 5 1 6 3 4 as.numeric(as.character(x)) ## [1] 20 25 23 38 20 40 25 30 To make R read text as character data instead of factors set the environment option stringsAsFactors=FALSE. This must be done at the start of each R session. options(stringsAsFactors=FALSE) Exercise How would you use factors to create a vector of colours for an arbitrarily long vector of fruits like str_vector above? Answer 7.3.5 Checking class/type We recommend checking your data is of the correct class after reading from files: x = 1.4 is.numeric(x) ## [1] TRUE is.character(x) ## [1] FALSE is.logical(x) ## [1] FALSE is.factor(x) ## [1] FALSE 7.4 Basic data structures So far we have only looked at single values and vectors. Vectors are the simplest data structure in R. They are a 1-dimensional array of data all of the same type. If the input when creating a vector is of different types it will be coerced to the data-type that is most consistent with the data. x = c(&quot;Hello&quot;, 5, TRUE) x ## [1] &quot;Hello&quot; &quot;5&quot; &quot;TRUE&quot; class(x) ## [1] &quot;character&quot; Here we tried to put character, numeric and logical data into a single vector so all the values were coerced to character data. A matrix is the two dimensional version of a vector, it also requires all data to be of the same type. If we combine a character vector and a numeric vector into a matrix, all the data will be coerced to characters: x = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;) y = c(1, 2, 3) class(x) ## [1] &quot;character&quot; class(y) ## [1] &quot;numeric&quot; m = cbind(x, y) m ## x y ## [1,] &quot;A&quot; &quot;1&quot; ## [2,] &quot;B&quot; &quot;2&quot; ## [3,] &quot;C&quot; &quot;3&quot; The quotation marks indicate that the numeric vector has been coerced to characters. Alternatively, to store data with columns of different data-types we can use a dataframe. z = data.frame(x, y) z ## x y ## 1 A 1 ## 2 B 2 ## 3 C 3 class(z[,1]) ## [1] &quot;character&quot; class(z[,2]) ## [1] &quot;numeric&quot; If you have set stringsAsFactors=FALSE as above you will find the first column remains characters, otherwise it will be automatically converted to a factor. options(stringsAsFactors=TRUE) z = data.frame(x, y) class(z[,1]) ## [1] &quot;factor&quot; Another difference between matrices and dataframes is the ability to select columns using the $ operator: m$x # throws an error z$x # ok The final basic data structure is the list. Lists allow data of different types and different lengths to be stored in a single object. Each element of a list can be any other R object : data of any type, any data structure, even other lists or functions. l = list(m, z) ll = list(sublist=l, a_matrix=m, numeric_value=42, this_string=&quot;Hello World&quot;, even_a_function=cbind) ll ## $sublist ## $sublist[[1]] ## x y ## [1,] &quot;A&quot; &quot;1&quot; ## [2,] &quot;B&quot; &quot;2&quot; ## [3,] &quot;C&quot; &quot;3&quot; ## ## $sublist[[2]] ## x y ## 1 A 1 ## 2 B 2 ## 3 C 3 ## ## ## $a_matrix ## x y ## [1,] &quot;A&quot; &quot;1&quot; ## [2,] &quot;B&quot; &quot;2&quot; ## [3,] &quot;C&quot; &quot;3&quot; ## ## $numeric_value ## [1] 42 ## ## $this_string ## [1] &quot;Hello World&quot; ## ## $even_a_function ## function (..., deparse.level = 1) ## .Internal(cbind(deparse.level, ...)) ## &lt;bytecode: 0x1021b1838&gt; ## &lt;environment: namespace:base&gt; Lists are most commonly used when returning a large number of results from a function that do not fit into any of the previous data structures. 7.5 More information You can get more information about any R commands relevant to these datatypes using by typing ?function in an interactive session. "],
["expression-qc-and-normalization.html", "8 Expression QC and Normalization", " 8 Expression QC and Normalization "],
["data-wrangling-scrnaseq.html", "9 Data Wrangling scRNAseq", " 9 Data Wrangling scRNAseq "],
["identifying-cell-populations.html", "10 Identifying Cell Populations", " 10 Identifying Cell Populations "],
["feature-selection-and-cluster-analysis.html", "11 Feature Selection and Cluster Analysis", " 11 Feature Selection and Cluster Analysis "],
["batch-effects.html", "12 Batch Effects", " 12 Batch Effects "],
["correcting-batch-effects.html", "13 Correcting Batch Effects", " 13 Correcting Batch Effects "],
["functional-analysis.html", "14 Functional Analysis 14.1 Gene sets and signatures 14.2 Pathway analysis 14.3 inferCNV / honeybadger", " 14 Functional Analysis 14.1 Gene sets and signatures 14.1.1 Cell Cycle marrow &lt;- CellCycleScoring(object = marrow, s.genes = s.genes, g2m.genes = g2m.genes, set.ident = TRUE) # view cell cycle scores and phase assignments head(x = marrow@meta.data) # Visualize the distribution of cell cycle markers across RidgePlot(object = marrow, features.plot = c(&quot;PCNA&quot;, &quot;TOP2A&quot;, &quot;MCM6&quot;, &quot;MKI67&quot;), nCol = 2) # Running a PCA on cell cycle genes reveals, unsurprisingly, that cells # separate entirely by phase marrow &lt;- RunPCA(object = marrow, pc.genes = c(s.genes, g2m.genes), do.print = FALSE) PCAPlot(object = marrow) 14.2 Pathway analysis 14.3 inferCNV / honeybadger Github Page 14.3.1 Create the InferCNV Object Reading in the raw counts matrix and meta data, populating the infercnv object infercnv_obj = CreateInfercnvObject( raw_counts_matrix=&quot;../example/oligodendroglioma_expression_downsampled.counts.matrix&quot;, annotations_file=&quot;../example/oligodendroglioma_annotations_downsampled.txt&quot;, delim=&quot;\\t&quot;, gene_order_file=&quot;../example/gencode_downsampled.txt&quot;, ref_group_names=c(&quot;Microglia/Macrophage&quot;,&quot;Oligodendrocytes (non-malignant)&quot;)) 14.3.2 Filtering genes Removing those genes that are very lowly expressed or present in very few cells # filter out low expressed genes cutoff=1 infercnv_obj &lt;- require_above_min_mean_expr_cutoff(infercnv_obj, cutoff) # filter out bad cells min_cells_per_gene=3 infercnv_obj &lt;- require_above_min_cells_ref(infercnv_obj, min_cells_per_gene=min_cells_per_gene) ## for safe keeping infercnv_orig_filtered = infercnv_obj #plot_mean_chr_expr_lineplot(infercnv_obj) save(&#39;infercnv_obj&#39;, file = &#39;../example_output/infercnv_obj.orig_filtered&#39;) 14.3.3 Normalize each cell’s counts for sequencing depth infercnv_obj &lt;- infercnv:::normalize_counts_by_seq_depth(infercnv_obj) 14.3.4 Perform Anscombe normalization Suggested by Matan for removing noisy variation at low counts infercnv_obj &lt;- infercnv:::anscombe_transform(infercnv_obj) 14.3.5 Log transform the normalized counts: infercnv_obj &lt;- log2xplus1(infercnv_obj) 14.3.6 Apply maximum bounds to the expression data to reduce outlier effects threshold = mean(abs(get_average_bounds(infercnv_obj))) infercnv_obj &lt;- apply_max_threshold_bounds(infercnv_obj, threshold=threshold) 14.3.7 Initial view, before inferCNV operations: plot_cnv(infercnv_obj, out_dir=&#39;../example_output/&#39;, output_filename=&#39;infercnv.logtransf&#39;, x.range=&quot;auto&quot;, title = &quot;Before InferCNV (filtered &amp; log2 transformed)&quot;, color_safe_pal = FALSE, x.center = mean(infercnv_obj@expr.data)) 14.3.8 Perform smoothing across chromosomes infercnv_obj = smooth_by_chromosome(infercnv_obj, window_length=101, smooth_ends=TRUE) # re-center each cell infercnv_obj &lt;- center_cell_expr_across_chromosome(infercnv_obj, method = &quot;median&quot;) plot_cnv(infercnv_obj, out_dir=&#39;../example_output/&#39;, output_filename=&#39;infercnv.chr_smoothed&#39;, x.range=&quot;auto&quot;, title = &quot;chr smoothed and cells re-centered&quot;, color_safe_pal = FALSE) 14.3.9 Subtract the reference values from observations, now have log(fold change) values infercnv_obj &lt;- subtract_ref_expr_from_obs(infercnv_obj, inv_log=TRUE) plot_cnv(infercnv_obj, out_dir=&#39;../example_output/&#39;, output_filename=&#39;infercnv.ref_subtracted&#39;, x.range=&quot;auto&quot;, title=&quot;ref subtracted&quot;, color_safe_pal = FALSE) 14.3.10 Invert log values Converting the log(FC) values to regular fold change values, centered at 1 (no fold change) This is important because we want (1/2)x to be symmetrical to 1.5x, representing loss/gain of one chromosome region. infercnv_obj &lt;- invert_log2(infercnv_obj) plot_cnv(infercnv_obj, out_dir=&#39;../example_output/&#39;, output_filename=&#39;infercnv.inverted&#39;, color_safe_pal = FALSE, x.range=&quot;auto&quot;, x.center=1, title = &quot;inverted log FC to FC&quot;) 14.3.11 Removing noise infercnv_obj &lt;- clear_noise_via_ref_mean_sd(infercnv_obj, sd_amplifier = 1.5) plot_cnv(infercnv_obj, out_dir=&#39;../example_output/&#39;, output_filename=&#39;infercnv.denoised&#39;, x.range=&quot;auto&quot;, x.center=1, title=&quot;denoised&quot;, color_safe_pal = FALSE) 14.3.12 Remove outlier data points This generally improves on the visualization infercnv_obj = remove_outliers_norm(infercnv_obj) plot_cnv(infercnv_obj, out_dir=&#39;../example_output/&#39;, output_filename=&#39;infercnv.outliers_removed&#39;, color_safe_pal = FALSE, x.range=&quot;auto&quot;, x.center=1, title = &quot;outliers removed&quot;) 14.3.13 Find DE genes by comparing the mutant types to normal types, BASIC Runs a t-Test comparing tumor/normal for each patient and normal sample, and masks out those genes that are not significantly DE. plot_data = infercnv_obj@expr.data high_threshold = max(abs(quantile(plot_data[plot_data != 0], c(0.05, 0.95)))) low_threshold = -1 * high_threshold infercnv_obj2 &lt;- infercnv:::mask_non_DE_genes_basic(infercnv_obj, test.use = &#39;t&#39;, center_val=1) plot_cnv(infercnv_obj2, out_dir=&#39;../example_output/&#39;, output_filename=&#39;infercnv.non-DE-genes-masked&#39;, color_safe_pal = FALSE, x.range=c(low_threshold, high_threshold), x.center=1, title = &quot;non-DE-genes-masked&quot;) 14.3.14 Additional Information 14.3.14.1 Online Documentation For additional explanations on files, usage, and a tutorial please visit the wiki. 14.3.14.2 TrinityCTAT This tool is a part of the TrinityCTAT toolkit focused on leveraging the use of RNA-Seq to better understand cancer transcriptomes. To find out more please visit TrinityCTAT 14.3.14.3 Applications This methodology was used in: Anoop P. Patel et al. Single-cell RNA-seq highlights intratumoral heterogeneity in primary glioblastoma. Science. 2014 Jun 20: 1396-1401 Tirosh I et al.Dissecting the multicellular ecosystem of metastatic melanoma by single-cell RNA-seq. Science. 2016 Apr 8;352(6282):189-96 "],
["pseudotime-cell-trajectories.html", "15 Pseudotime Cell Trajectories", " 15 Pseudotime Cell Trajectories "],
["spatial-genomics.html", "16 Spatial Genomics", " 16 Spatial Genomics "],
["functional-pseudotime-analysis.html", "17 Functional Pseudotime Analysis", " 17 Functional Pseudotime Analysis "],
["single-cell-multiomic-technologies.html", "18 Single Cell Multiomic Technologies", " 18 Single Cell Multiomic Technologies "],
["cite-seq-and-scatac-seq.html", "19 CITE-seq and scATAC-seq", " 19 CITE-seq and scATAC-seq "],
["references.html", "References", " References "],
["intro.html", "20 Introduction", " 20 Introduction You can label chapter and section titles using {#label} after them, e.g., we can reference Chapter 20. If you do not manually label them, there will be automatic labels anyway, e.g., Chapter Figures and tables with captions will be placed in figure and table environments, respectively. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 20.1: Here is a nice figure! Reference a figure by its code chunk label with the fig: prefix, e.g., see Figure 20.1. Similarly, you can reference tables generated from knitr::kable(), e.g., see Table 20.1. knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 20.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa You can write citations, too. For example, we are using the bookdown package (Xie 2018) in this sample book, which was built on top of R Markdown and knitr (Xie 2015). References "],
["literature.html", "21 Literature", " 21 Literature Here is a review of existing methods. "]
]
